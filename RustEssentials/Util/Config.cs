using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Timers;

namespace RustEssentials.Util
{
    public static class Config
    {
        private static string configInput;

        // Whitelist
        private static Match MatchEnabledWhitelist;
        private static Match MatchMySQL;
        private static Match MatchUseSteamGroup;
        private static Match MatchSteamGroup;
        private static Match MatchAutoRefresh;
        private static Match MatchRefreshInterval;
        private static Match MatchUseAsMembers;
        private static Match MatchWhitelistKickCMD;
        private static Match MatchWhitelistKickJoin;
        private static Match MatchWhitelistGood;
        private static Match MatchWhitelistBad;
        // Airdrop
        private static Match MatchAnnounceDrops;
        private static Match MatchOnFirstPlayer;
        private static Match MatchDropInterval;
        private static Match MatchDropTime;
        private static Match MatchDropMode;
        private static Match MatchMinimumPlayers;
        private static Match MatchPlaneCount;
        private static Match MatchMinimumCrates;
        private static Match MatchMaximumCrates;
        // Environment
        private static Match MatchStartTime;
        private static Match MatchDayLength;
        private static Match MatchNightLength;
        private static Match MatchFreezeTime;
        private static Match MatchConstantFullMoon;
        private static Match MatchFallDamage;
        private static Match MatchEnableFallSound;
        private static Match MatchVoiceDistance;
        private static Match MatchEnableRepair;
        private static Match MatchDoorStops;
        private static Match MatchEnableDurability;
        private static Match MatchEnableDoorHolding;
        private static Match MatchEnableKeepItems;
        // Nudity
        private static Match MatchForceNudity;
        private static Match MatchOnlyOnJoin;
        private static Match MatchNudityRefreshInterval;
        // Chat
        private static Match MatchDirectChat;
        private static Match MatchGlobalChat;
        private static Match MatchRemoveTag;
        private static Match MatchDefaultChat;
        private static Match MatchDirectDistance;
        private static Match MatchAllowedChars;
        private static Match MatchRestrictChars;
        private static Match MatchMinimumNameCount;
        private static Match MatchMaximumNameCount;
        private static Match MatchKickDuplicate;
        private static Match MatchLowerAuthority;
        private static Match MatchIllegalWords;
        private static Match MatchCensorship;
        // Messages
        private static Match MatchBotName;
        private static Match MatchDefaultColor;
        private static Match MatchServerIP;
        private static Match MatchVersionOnJoin;
        private static Match MatchJoinMessage;
        private static Match MatchEnableJoin;
        private static Match MatchLeaveMessage;
        private static Match MatchEnableLeave;
        private static Match MatchSuicideMessage;
        private static Match MatchEnableSuicide;
        private static Match MatchMurderMessage;
        private static Match MatchMurderMessageUnknown;
        private static Match MatchEnableMurder;
        private static Match MatchDeathMessage;
        private static Match MatchEnableDeath;
        private static Match MatchDropItemMessage;
        private static Match MatchHideKills;
        private static Match MatchKillsToConsole;
        private static Match MatchIncludePositionsInLog;
        private static Match MatchUnknownCommand;
        private static Match MatchNextToName;
        private static Match MatchRemovePrefix;
        private static Match MatchEnableWordWrap;
        private static Match MatchWordWrapLimit;
        private static Match MatchSunBasedCompass;
        private static Match MatchSendChatToConsoles;
        private static Match MatchEnableDropdownKills;
        private static Match MatchDropdownKillMessage;
        private static Match MatchEnableAllyName;
        private static Match MatchEnableDropdownFactionHits;
        private static Match MatchEnableDropdownAllyHits;
        // Logs & Debug
        private static Match MatchEnableConsoleLogging;
        private static Match MatchEnableChatLogging;
        private static Match MatchPluginChat;
        private static Match MatchChatLogCap;
        private static Match MatchLogCap;
        private static Match MatchLogBroadcastErrors;
        private static Match MatchCatchBroadcastErrors;
        private static Match MatchDisconnectEvenIfNull;
        private static Match MatchLogBedPlacements;
        // BigBrother
        private static Match MatchStorageLogCap;
        private static Match MatchEnableStorageLogs;
        private static Match MatchLogStorageTransfer;
        private static Match MatchSleeperDeathLogsCap;
        private static Match MatchEnableSleeperDeathLogs;
        // Movement
        private static Match MatchTeleportRequest;
        private static Match MatchRequestDelay;
        private static Match MatchWarpDelay;
        private static Match MatchRequestCooldownType;
        private static Match MatchRequestCooldown;
        private static Match MatchDenyRequestWarzone;
        private static Match MatchEnableInHouse;
        private static Match MatchWandDistance;
        private static Match MatchWandTool;
        private static Match MatchPortalTool;
        private static Match MatchFreezeRefreshDelay;
        private static Match MatchFreezeDistance;
        // MySQL
        private static Match MatchHost;
        private static Match MatchPort;
        private static Match MatchDatabase;
        private static Match MatchUser;
        private static Match MatchPass;
        // Inheritance
        private static Match MatchCommandInheritance;
        private static Match MatchKitInheritance;
        private static Match MatchWarpInheritance;
        // Damage
        private static Match MatchNeutralDamage;
        private static Match MatchFriendlyDamage;
        private static Match MatchAlliedDamage;
        private static Match MatchWarDamage;
        private static Match MatchWarFriendlyDamage;
        private static Match MatchWarAllyDamage;
        // Item Controller
        private static Match MatchResearchAtBench;
        private static Match MatchInfAmmoClipSize;
        private static Match MatchInfiniteResearch;
        private static Match MatchResearchPaper;
        private static Match MatchCraftAtBench;
        private static Match MatchRemoveOnDeath;
        private static Match MatchRemoveOnDisconnect;
        private static Match MatchEnableDropItem;
        // Remover
        private static Match MatchEnableRemover;
        private static Match MatchReturnItems;
        private static Match MatchRemoverAttackDelay;
        private static Match MatchDisregardCeilingWeight;
        private static Match MatchDisregardPillarWeight;
        private static Match MatchDisregardFoundationWeight;
        // Top Rust Servers
        private static Match MatchEnableTRSVoting;
        private static Match MatchTRSAPIKey;
        private static Match MatchTRSVoteLink;
        private static Match MatchTRSVotingMessage;
        // Rust-Servers
        private static Match MatchEnableRSVoting;
        private static Match MatchRSAPIKey;
        private static Match MatchRSVoteLink;
        private static Match MatchRSVotingMessage;
        // Whois
        private static Match MatchEnableRank;
        // Zones
        private static Match MatchCheckIfInZone;
        // Limited Sleepers
        private static Match MatchEnableLimitedSleepers;
        private static Match MatchSleeperElapseInterval;
        private static Match MatchExcludeFromSleepers;
        // Antihack
        private static Match MatchCheckMode;
        private static Match MatchEnableAntiSpeed;
        private static Match MatchEnableAntiJump;
        private static Match MatchEnableAntiBP;
        private static Match MatchEnableAntiAW;
        private static Match MatchEnableAntiRange;
        private static Match MatchRangeFlexibility;
        private static Match MatchViolationLimit;
        private static Match MatchMaximumSpeed;
        private static Match MatchMaximumJumpSpeed;
        private static Match MatchCalculateInterval;
        private static Match MatchMoveBackSpeed;
        private static Match MatchMoveBackJump;
        private static Match MatchLowerViolationInterval;
        private static Match MatchSendAHToConsole;
        private static Match MatchBedAndBagDistance;
        private static Match MatchGatewayDistance;
        // Resources
        private static Match MatchRockMultiplier;
        private static Match MatchSHatchetMultiplier;
        private static Match MatchHatchetMultiplier;
        private static Match MatchPickAxeMultiplier;
        private static Match MatchOverrideWoodResources;
        private static Match MatchOverrideOreResources;
        private static Match MatchOverrideAIResources;
        private static Match MatchMultiplyMaxWood;
        private static Match MatchMultiplyMaxOre;
        private static Match MatchMultiplyMaxAIResources;
        // Shopify
        private static Match MatchEnableShopify;
        private static Match MatchShopifyAPIKey;
        private static Match MatchShopifyLink;
        // Bouncing Betty
        private static Match MatchEnableBouncingBetty;
        private static Match MatchBettiesPerPlayer;
        private static Match MatchBettyArmingDelay;
        private static Match MatchBettyNearOtherHouses;
        private static Match MatchDistanceFromOtherHouses;
        private static Match MatchOwnerActivateBetty;
        private static Match MatchFactionActivateBetty;
        private static Match MatchAllyActivateBetty;
        private static Match MatchBettyHurtOwner;
        private static Match MatchBettyHurtFaction;
        private static Match MatchBettyHurtAlly;
        private static Match MatchOwnerPickupBetty;
        private static Match MatchFactionPickupBetty;
        private static Match MatchAllyPickupBetty;
        private static Match MatchNeutralPickupBetty;
        private static Match MatchReturnBettyMaterials;
        private static Match MatchBettyDeathDeleteItems;
        private static Match MatchActivateRadius;
        private static Match MatchBreakLegsRadius;
        private static Match MatchBleedingRadius;
        private static Match MatchHurtRadius;
        private static Match MatchMaxBettyPlayerDamage;
        private static Match MatchMaxBettyObjectDamage;
        // Family Sharing
        private static Match MatchEnableAntiFamilyShare;
        private static Match MatchSteamAPIKey;
        private static Match MatchExcludeFromFamilyCheck;
        // LightsOut
        private static Match MatchDefaultLightsRange;
        private static Match MatchMaxLightsRange;
        private static Match MatchMaxLightsPerHouse;
        private static Match MatchMaxLightsPerPerson;

        // Whitelist
        public static string enabledWhitelist;
        public static string MySQL;
        public static string useSteamGroup;
        public static string steamGroup;
        public static string autoRefresh;
        public static string refreshInterval;
        public static string useAsMembers;
        public static string whitelistKickCMD;
        public static string whitelistKickJoin;
        public static string whitelistCheckGood;
        public static string whitelistCheckBad;
        // Airdrop
        public static string announceDrops;
        public static string onFirstPlayer;
        public static string dropInterval;
        public static string dropTime;
        public static string dropMode;
        public static string minimumPlayers;
        public static string planeCount;
        public static string minimumCrates;
        public static string maximumCrates;
        // Environment
        public static string startTime;
        public static string dayLength;
        public static string nightLength;
        public static string freezeTime;
        public static string constantFullMoon;
        public static string fallDamage;
        public static string enableFallSound;
        public static string voiceDistance;
        public static string enableRepair;
        public static string doorStops;
        public static string enableDurability;
        public static string enableDoorHolding;
        public static string enableKeepItems;
        // Nudity
        public static string forceNudity;
        public static string onlyOnJoin;
        public static string nudityRefreshInterval;
        // Chat
        public static string directChat;
        public static string globalChat;
        public static string removeTag;
        public static string defaultChat;
        public static string directDistance;
        public static string allowedChars;
        public static string restrictChars;
        public static string minimumNameCount;
        public static string maximumNameCount;
        public static string kickDuplicate;
        public static string lowerAuthority;
        public static string illegalWords;
        public static string censorship;
        // Messages
        public static string botName;
        public static string defaultColor;
        public static string serverIP;
        public static string versionOnJoin;
        public static string joinMessage;
        public static string enableJoin;
        public static string leaveMessage;
        public static string enableLeave;
        public static string suicideMessage;
        public static string enableSuicide;
        public static string murderMessage;
        public static string murderMessageUnknown;
        public static string enableMurder;
        public static string deathMessage;
        public static string enableDeath;
        public static string dropItemMessage;
        public static string hideKills;
        public static string killsToConsole;
        public static string includePositionsInLog;
        public static string unknownCommand;
        public static string nextToName;
        public static string removePrefix;
        public static string enableWordWrap;
        public static string wordWrapLimit;
        public static string sunBasedCompass;
        public static string sendChatToConsoles;
        public static string dropdownKillMessage;
        public static string enableDropdownKills;
        public static string enableAllyName;
        public static string enableDropdownFactionHits;
        public static string enableDropdownAllyHits;
        // Logs & Debug
        public static string enableConsoleLogging;
        public static string enableChatLogging;
        public static string logPluginChat;
        public static string chatLogCap;
        public static string logCap;
        public static string logBroadcastErrors;
        public static string catchBroadcastErrors;
        public static string disconnectEvenIfNull;
        public static string logBedPlacements;
        // BigBrother
        public static string storageLogCap;
        public static string enableStorageLogs;
        public static string logStorageTransfer;
        public static string sleeperDeathLogsCap;
        public static string enableSleeperDeathLogs;
        // Movement
        public static string teleportRequest;
        public static string requestDelay;
        public static string warpDelay;
        public static string requestCooldownType;
        public static string requestCooldown;
        public static string denyRequestWarzone;
        public static string enableInHouse;
        public static string wandDistance;
        public static string wandTool;
        public static string portalTool;
        public static string freezeRefreshDelay;
        public static string freezeDistance;
        // MySQL
        public static string host;
        public static string port;
        public static string database;
        public static string user;
        public static string pass;
        // Inheritance
        public static string inheritCommands;
        public static string inheritKits;
        public static string inheritWarps;
        // Damage
        public static string neutralDamage;
        public static string friendlyDamage;
        public static string alliedDamage;
        public static string warDamage;
        public static string warFriendlyDamage;
        public static string warAllyDamage;
        // Item Controller
        public static string researchAtBench;
        public static string infAmmoClipSize;
        public static string infiniteResearch;
        public static string researchPaper;
        public static string craftAtBench;
        public static string removeOnDeath;
        public static string removeOnDisconnect;
        public static string enableDropItem;
        // Remover
        public static string enableRemover;
        public static string returnItems;
        public static string removerAttackDelay;
        public static string disregardCeilingWeight;
        public static string disregardPillarWeight;
        public static string disregardFoundationWeight;
        // Top Rust Servers
        public static string enableTRSVoting;
        public static string TRSAPIKey;
        public static string TRSvoteLink;
        public static string TRSvotingMessage;
        // Rust-Servers
        public static string enableRSVoting;
        public static string RSAPIKey;
        public static string RSvoteLink;
        public static string RSvotingMessage;
        // Whois
        public static string enableRank;
        // Zones
        public static string checkIfInZone;
        // Limited Sleepers
        public static string enableLimitedSleepers;
        public static string sleeperElapseInterval;
        public static string excludeFromSleepers;
        // Antihack
        public static string checkMode;
        public static string enableAntiSpeed;
        public static string enableAntiJump;
        public static string enableAntiBP;
        public static string enableAntiAW;
        public static string enableAntiRange;
        public static string rangeFlexibility;
        public static string violationLimit;
        public static string maximumSpeed;
        public static string maximumJumpSpeed;
        public static string calculateInterval;
        public static string moveBackSpeed;
        public static string moveBackJump;
        public static string lowerViolationInterval;
        public static string sendAHToConsole;
        public static string bedAndBagDistance;
        public static string gatewayDistance;
        // Resources
        public static string rockMultiplier;
        public static string sHatchetMultiplier;
        public static string hatchetMultiplier;
        public static string pickaxeMultiplier;
        public static string overrideWoodResources;
        public static string overrideOreResources;
        public static string overrideAIResources;
        public static string multiplyMaxWood;
        public static string multiplyMaxOre;
        public static string multiplyMaxAIResources;
        // Shopify
        public static string enableShopify;
        public static string shopifyAPIKey;
        public static string shopifyLink;
        // Bouncing Betty
        public static string enableBouncingBetty;
        public static string bettiesPerPlayer;
        public static string bettyArmingDelay;
        public static string bettyNearOtherHouses;
        public static string distanceFromOtherHouses;
        public static string ownerActivateBetty;
        public static string factionActivateBetty;
        public static string allyActivateBetty;
        public static string bettyHurtOwner;
        public static string bettyHurtFaction;
        public static string bettyHurtAlly;
        public static string ownerPickupBetty;
        public static string factionPickupBetty;
        public static string allyPickupBetty;
        public static string neutralPickupBetty;
        public static string returnBettyMaterials;
        public static string bettyDeathDeleteItems;
        public static string activateRadius;
        public static string breakLegsRadius;
        public static string bleedingRadius;
        public static string hurtRadius;
        public static string maxBettyPlayerDamage;
        public static string maxBettyObjectDamage;
        // Family Sharing
        public static string enableAntiFamilyShare;
        public static string steamAPIKey;
        public static string excludeFromFamilyCheck;
        // LightsOut
        public static string defaultLightsRange;
        public static string maxLightsRange;
        public static string maxLightsPerHouse;
        public static string maxLightsPerPerson;


        public static bool setVariables()
        {
            configInput = File.ReadAllText(Vars.cfgFile);
            List<string> configLines = new List<string>();
            foreach (string s in configInput.Split(new string[] { Environment.NewLine }, StringSplitOptions.None))
            {
                string line = s.Trim();
                if (!line.StartsWith("#"))
                {
                    configLines.Add(line);
                }
            }
            configInput = string.Join(Environment.NewLine, configLines.ToArray());

            string currentItem = "Setting Variables";

            try
            {
                currentItem = "Grabbing enableWhitelist";
                MatchEnabledWhitelist = Regex.Match(configInput, @"enableWhitelist=\w+", RegexOptions.IgnoreCase);
                //MatchMySQL = Regex.Match(configInput, @"useMySQL=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing useSteamGroup";
                MatchUseSteamGroup = Regex.Match(configInput, @"useSteamGroup=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing steamGroupName";
                MatchSteamGroup = Regex.Match(configInput, @"steamGroupName=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing autoRefresh";
                MatchAutoRefresh = Regex.Match(configInput, @"autoRefresh=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing refreshInterval";
                MatchRefreshInterval = Regex.Match(configInput, @"refreshInterval=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing useAsMembers";
                MatchUseAsMembers = Regex.Match(configInput, @"useAsMembers=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing whitelistKickCMD";
                MatchWhitelistKickCMD = Regex.Match(configInput, @"whitelistKickCMD=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing whitelistKickJoin";
                MatchWhitelistKickJoin = Regex.Match(configInput, @"whitelistKickJoin=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing whitelistCheckGood";
                MatchWhitelistGood = Regex.Match(configInput, @"whitelistCheckGood=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing whitelistCheckBad";
                MatchWhitelistBad = Regex.Match(configInput, @"whitelistCheckBad=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing announceDrops";
                MatchAnnounceDrops = Regex.Match(configInput, @"announceDrops=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing onFirstPlayer";
                MatchOnFirstPlayer = Regex.Match(configInput, @"onFirstPlayer=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing dropInterval";
                MatchDropInterval = Regex.Match(configInput, @"dropInterval=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing dropTime";
                MatchDropTime = Regex.Match(configInput, @"dropTime=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing dropMode";
                MatchDropMode = Regex.Match(configInput, @"dropMode=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing minimumPlayers";
                MatchMinimumPlayers = Regex.Match(configInput, @"minimumPlayers=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing planeCount";
                MatchPlaneCount = Regex.Match(configInput, @"planeCount=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing minimumCrates";
                MatchMinimumCrates = Regex.Match(configInput, @"minimumCrates=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing maximumCrates";
                MatchMaximumCrates = Regex.Match(configInput, @"maximumCrates=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing startTime";
                MatchStartTime = Regex.Match(configInput, @"startTime=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing dayLength";
                MatchDayLength = Regex.Match(configInput, @"dayLength=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing nightLength";
                MatchNightLength = Regex.Match(configInput, @"nightLength=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing freezeTime";
                MatchFreezeTime = Regex.Match(configInput, @"freezeTime=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing constantFullMoon";
                MatchConstantFullMoon = Regex.Match(configInput, @"constantFullMoon=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing fallDamage";
                MatchFallDamage = Regex.Match(configInput, @"fallDamage=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableFallSound";
                MatchEnableFallSound = Regex.Match(configInput, @"enableFallSound=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing voiceDistance";
                MatchVoiceDistance = Regex.Match(configInput, @"voiceDistance=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableRepair";
                MatchEnableRepair = Regex.Match(configInput, @"enableRepair=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing doorStops";
                MatchDoorStops = Regex.Match(configInput, @"doorStops=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableDurability";
                MatchEnableDurability = Regex.Match(configInput, @"enableDurability=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableDoorHolding";
                MatchEnableDoorHolding = Regex.Match(configInput, @"enableDoorHolding=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableKeepItems";
                MatchEnableKeepItems = Regex.Match(configInput, @"enableKeepItems=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing forceNudity";
                MatchForceNudity = Regex.Match(configInput, @"forceNudity=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing onlyOnJoin";
                MatchOnlyOnJoin = Regex.Match(configInput, @"onlyOnJoin=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing nudityRefreshInterval";
                MatchNudityRefreshInterval = Regex.Match(configInput, @"nudityRefreshInterval=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing directChat";
                MatchDirectChat = Regex.Match(configInput, @"directChat=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing globalChat";
                MatchGlobalChat = Regex.Match(configInput, @"globalChat=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing removeTag";
                MatchRemoveTag = Regex.Match(configInput, @"removeTag=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing defaultChat";
                MatchDefaultChat = Regex.Match(configInput, @"defaultChat=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing directDistance";
                MatchDirectDistance = Regex.Match(configInput, @"directDistance=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing allowedChars";
                MatchAllowedChars = Regex.Match(configInput, @"allowedChars=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing restrictChars";
                MatchRestrictChars = Regex.Match(configInput, @"restrictChars=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing minimumNameCount";
                MatchMinimumNameCount = Regex.Match(configInput, @"minimumNameCount=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing maximumNameCount";
                MatchMaximumNameCount = Regex.Match(configInput, @"maximumNameCount=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing kickDuplicate";
                MatchKickDuplicate = Regex.Match(configInput, @"kickDuplicate=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing lowerAuthority";
                MatchLowerAuthority = Regex.Match(configInput, @"lowerAuthority=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing illegalWords";
                MatchIllegalWords = Regex.Match(configInput, @"illegalWords=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing censorship";
                MatchCensorship = Regex.Match(configInput, @"censorship=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing botName";
                MatchBotName = Regex.Match(configInput, @"botName=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing defaultColor";
                MatchDefaultColor = Regex.Match(configInput, @"defaultColor=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing serverIP";
                MatchServerIP = Regex.Match(configInput, @"serverIP=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing versionOnJoin";
                MatchVersionOnJoin = Regex.Match(configInput, @"versionOnJoin=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing joinMessage";
                MatchJoinMessage = Regex.Match(configInput, @"joinMessage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableJoin";
                MatchEnableJoin = Regex.Match(configInput, @"enableJoin=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing leaveMessage";
                MatchLeaveMessage = Regex.Match(configInput, @"leaveMessage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableLeave";
                MatchEnableLeave = Regex.Match(configInput, @"enableLeave=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing suicideMessage";
                MatchSuicideMessage = Regex.Match(configInput, @"suicideMessage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableSuicide";
                MatchEnableSuicide = Regex.Match(configInput, @"enableSuicide=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing murderMessage";
                MatchMurderMessage = Regex.Match(configInput, @"murderMessage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing murderMessageUnknown";
                MatchMurderMessageUnknown = Regex.Match(configInput, @"murderMessageUnknown=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableMurder";
                MatchEnableMurder = Regex.Match(configInput, @"enableMurder=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing deathMessage";
                MatchDeathMessage = Regex.Match(configInput, @"deathMessage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableDeath";
                MatchEnableDeath = Regex.Match(configInput, @"enableDeath=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing dropItemMessage";
                MatchDropItemMessage = Regex.Match(configInput, @"dropItemMessage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing hideKills";
                MatchHideKills = Regex.Match(configInput, @"hideKills=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing killsToConsole";
                MatchKillsToConsole = Regex.Match(configInput, @"killsToConsole=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing includePositionsInLog";
                MatchIncludePositionsInLog = Regex.Match(configInput, @"includePositionsInLog=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing unknownCommand";
                MatchUnknownCommand = Regex.Match(configInput, @"unknownCommand=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing nextToName";
                MatchNextToName = Regex.Match(configInput, @"nextToName=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing removePrefix";
                MatchRemovePrefix = Regex.Match(configInput, @"removePrefix=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableWordWrap";
                MatchEnableWordWrap = Regex.Match(configInput, @"enableWordWrap=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing wordWrapLimit";
                MatchWordWrapLimit = Regex.Match(configInput, @"wordWrapLimit=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing sunBasedCompass";
                MatchSunBasedCompass = Regex.Match(configInput, @"sunBasedCompass=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing sendChatToConsoles";
                MatchSendChatToConsoles = Regex.Match(configInput, @"sendChatToConsoles=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing dropdownKillMessage";
                MatchDropdownKillMessage = Regex.Match(configInput, @"dropdownKillMessage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableDropdownKills";
                MatchEnableDropdownKills = Regex.Match(configInput, @"enableDropdownKills=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableAllyName";
                MatchEnableAllyName = Regex.Match(configInput, @"enableAllyName=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableDropdownFactionHits";
                MatchEnableDropdownFactionHits = Regex.Match(configInput, @"enableDropdownFactionHits=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableDropdownAllyHits";
                MatchEnableDropdownAllyHits = Regex.Match(configInput, @"enableDropdownAllyHits=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableConsoleLogging";
                MatchEnableConsoleLogging = Regex.Match(configInput, @"enableConsoleLogging=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableChatLogging";
                MatchEnableChatLogging = Regex.Match(configInput, @"enableChatLogging=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing logModMessages";
                MatchPluginChat = Regex.Match(configInput, @"logModMessages=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing chatLogCap";
                MatchChatLogCap = Regex.Match(configInput, @"chatLogCap=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing logCap";
                MatchLogCap = Regex.Match(configInput, @"logCap=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing logBroadcastErrors";
                MatchLogBroadcastErrors = Regex.Match(configInput, @"logBroadcastErrors=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing catchBroadcastErrors";
                MatchCatchBroadcastErrors = Regex.Match(configInput, @"catchBroadcastErrors=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing disconnectEvenIfNull";
                MatchDisconnectEvenIfNull = Regex.Match(configInput, @"disconnectEvenIfNull=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing logBedPlacements";
                MatchLogBedPlacements = Regex.Match(configInput, @"logBedPlacements=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing storageLogsCap";
                MatchStorageLogCap = Regex.Match(configInput, @"storageLogCap=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableStorageLogs";
                MatchEnableStorageLogs = Regex.Match(configInput, @"enableStorageLogs=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing logStorageTransfer";
                MatchLogStorageTransfer = Regex.Match(configInput, @"logStorageTransfer=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing sleeperDeathLogsCap";
                MatchSleeperDeathLogsCap = Regex.Match(configInput, @"sleeperDeathLogsCap=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableSleeperDeathLogs";
                MatchEnableSleeperDeathLogs = Regex.Match(configInput, @"enableSleeperDeathLogs=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing teleportRequest";
                MatchTeleportRequest = Regex.Match(configInput, @"teleportRequest=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing requestDelay";
                MatchRequestDelay = Regex.Match(configInput, @"requestDelay=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing warpDelay";
                MatchWarpDelay = Regex.Match(configInput, @"warpDelay=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing requestCooldownType";
                MatchRequestCooldownType = Regex.Match(configInput, @"requestCooldownType=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing requestCooldown";
                MatchRequestCooldown = Regex.Match(configInput, @"requestCooldown=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing denyRequestWarzone";
                MatchDenyRequestWarzone = Regex.Match(configInput, @"denyRequestWarzone=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableInHouse";
                MatchEnableInHouse = Regex.Match(configInput, @"enableInHouse=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing wandDistance";
                MatchWandDistance = Regex.Match(configInput, @"wandDistance=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing wandTool";
                MatchWandTool = Regex.Match(configInput, @"wandTool=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing portalTool";
                MatchPortalTool = Regex.Match(configInput, @"portalTool=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing freezeRefreshDelay";
                MatchFreezeRefreshDelay = Regex.Match(configInput, @"freezeRefreshDelay=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing freezeDistance";
                MatchFreezeDistance = Regex.Match(configInput, @"freezeDistance=[^\n]*", RegexOptions.IgnoreCase);
                //MatchHost = Regex.Match(configInput, @"host=\w+", RegexOptions.IgnoreCase);
                //MatchPort = Regex.Match(configInput, @"port=\w+", RegexOptions.IgnoreCase);
                //MatchDatabase = Regex.Match(configInput, @"database=\w+", RegexOptions.IgnoreCase);
                //MatchUser = Regex.Match(configInput, @"user=\w+", RegexOptions.IgnoreCase);
                //MatchPass = Regex.Match(configInput, @"pass=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing inheritCommands";
                MatchCommandInheritance = Regex.Match(configInput, @"inheritCommands=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing inheritKits";
                MatchKitInheritance = Regex.Match(configInput, @"inheritKits=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing inheritWarps";
                MatchWarpInheritance = Regex.Match(configInput, @"inheritWarps=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing neutralDamage";
                MatchNeutralDamage = Regex.Match(configInput, @"neutralDamage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing friendlyDamage";
                MatchFriendlyDamage = Regex.Match(configInput, @"friendlyDamage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing allyDamage";
                MatchAlliedDamage = Regex.Match(configInput, @"allyDamage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing warDamage";
                MatchWarDamage = Regex.Match(configInput, @"warDamage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing warFriendlyDamage";
                MatchWarFriendlyDamage = Regex.Match(configInput, @"warFriendlyDamage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing warAllyDamage";
                MatchWarAllyDamage = Regex.Match(configInput, @"warAllyDamage=[^\n]*", RegexOptions.IgnoreCase);
                //MatchResearchAtBench = Regex.Match(configInput, @"researchAtBench=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing infAmmoClipSize";
                MatchInfAmmoClipSize = Regex.Match(configInput, @"infAmmoClipSize=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing infiniteResearch";
                MatchInfiniteResearch = Regex.Match(configInput, @"infiniteResearch=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing researchPaper";
                MatchResearchPaper = Regex.Match(configInput, @"researchPaper=\w+", RegexOptions.IgnoreCase);
                //MatchCraftAtBench = Regex.Match(configInput, @"craftAtBench=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing removeOnDeath";
                MatchRemoveOnDeath = Regex.Match(configInput, @"removeOnDeath=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing removeOnDisconnect";
                MatchRemoveOnDisconnect = Regex.Match(configInput, @"removeOnDisconnect=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableDropItem";
                MatchEnableDropItem = Regex.Match(configInput, @"enableDropItem=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableRemover";
                MatchEnableRemover = Regex.Match(configInput, @"enableRemover=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing returnItems";
                MatchReturnItems = Regex.Match(configInput, @"returnItems=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing removerAttackDelay";
                MatchRemoverAttackDelay = Regex.Match(configInput, @"removerAttackDelay=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing disregardCeilingWeight";
                MatchDisregardCeilingWeight = Regex.Match(configInput, @"disregardCeilingWeight=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing disregardPillarWeight";
                MatchDisregardPillarWeight = Regex.Match(configInput, @"disregardPillarWeight=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing disregardFoundationWeight";
                MatchDisregardFoundationWeight = Regex.Match(configInput, @"disregardFoundationWeight=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableTRSVoting";
                MatchEnableTRSVoting = Regex.Match(configInput, @"enableTRSVoting=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing TRSAPIKey";
                MatchTRSAPIKey = Regex.Match(configInput, @"TRSAPIKey=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing TRSvoteLink";
                MatchTRSVoteLink = Regex.Match(configInput, @"TRSvoteLink=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing TRSvotingMessage";
                MatchTRSVotingMessage = Regex.Match(configInput, @"TRSvotingMessage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableTSVoting";
                MatchEnableRSVoting = Regex.Match(configInput, @"enableRSVoting=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing RSAPIKey";
                //MatchRSAPIKey = Regex.Match(configInput, @"RSAPIKey=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing RSvoteLink";
                MatchRSVoteLink = Regex.Match(configInput, @"RSvoteLink=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing RSvotingMessage";
                MatchRSVotingMessage = Regex.Match(configInput, @"RSvotingMessage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableRank";
                MatchEnableRank = Regex.Match(configInput, @"enableRank=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing checkIfInZone";
                MatchCheckIfInZone = Regex.Match(configInput, @"checkIfInZone=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableLimitedSleepers";
                MatchEnableLimitedSleepers = Regex.Match(configInput, @"enableLimitedSleepers=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing sleeperElapseInterval";
                MatchSleeperElapseInterval = Regex.Match(configInput, @"sleeperElapseInterval=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing excludeFromSleepers";
                MatchExcludeFromSleepers = Regex.Match(configInput, @"excludeFromSleepers=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing checkMode";
                MatchCheckMode = Regex.Match(configInput, @"checkMode=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableAntiSpeed";
                MatchEnableAntiSpeed = Regex.Match(configInput, @"enableAntiSpeed=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableAntiJump";
                MatchEnableAntiJump = Regex.Match(configInput, @"enableAntiJump=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableAntiBP";
                MatchEnableAntiBP = Regex.Match(configInput, @"enableAntiBP=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableAntiAW";
                MatchEnableAntiAW = Regex.Match(configInput, @"enableAntiAW=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableAntiRange";
                MatchEnableAntiRange = Regex.Match(configInput, @"enableAntiRange=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing rangeFlexibility";
                MatchRangeFlexibility = Regex.Match(configInput, @"rangeFlexibility=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing violationLimit";
                MatchViolationLimit = Regex.Match(configInput, @"violationLimit=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing maximumSpeed";
                MatchMaximumSpeed = Regex.Match(configInput, @"maximumSpeed=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing maximumJumpSpeed";
                MatchMaximumJumpSpeed = Regex.Match(configInput, @"maximumJumpSpeed=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing calculateInterval";
                MatchCalculateInterval = Regex.Match(configInput, @"calculateInterval=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing moveBackSpeed";
                MatchMoveBackSpeed = Regex.Match(configInput, @"moveBackSpeed=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing moveBackJump";
                MatchMoveBackJump = Regex.Match(configInput, @"moveBackJump=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing lowerViolationInterval";
                MatchLowerViolationInterval = Regex.Match(configInput, @"lowerViolationInterval=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing sendAHToConsole";
                MatchSendAHToConsole = Regex.Match(configInput, @"sendAHToConsole=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing bedAndBagDistance";
                MatchBedAndBagDistance = Regex.Match(configInput, @"bedAndBagDistance=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing gatewayDistance";
                MatchGatewayDistance = Regex.Match(configInput, @"gatewayDistance=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing rockMultiplier";
                MatchRockMultiplier = Regex.Match(configInput, @"rockMultiplier=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing sHatchetMultiplier";
                MatchSHatchetMultiplier = Regex.Match(configInput, @"sHatchetMultiplier=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing hatchetMultiplier";
                MatchHatchetMultiplier = Regex.Match(configInput, @"hatchetMultiplier=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing pickaxeMultiplier";
                MatchPickAxeMultiplier = Regex.Match(configInput, @"pickaxeMultiplier=\w+", RegexOptions.IgnoreCase);
                currentItem = "Grabbing overrideWoodResources";
                MatchOverrideWoodResources = Regex.Match(configInput, @"overrideWoodResources=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing overrideOreResources";
                MatchOverrideOreResources = Regex.Match(configInput, @"overrideOreResources=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing overrideAIResources";
                MatchOverrideAIResources = Regex.Match(configInput, @"overrideAIResources=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing multiplyMaxWood";
                MatchMultiplyMaxWood = Regex.Match(configInput, @"multiplyMaxWood=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing multiplyMaxOre";
                MatchMultiplyMaxOre = Regex.Match(configInput, @"multiplyMaxOre=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing multiplyMaxAIResources";
                MatchMultiplyMaxAIResources = Regex.Match(configInput, @"multiplyMaxAIResources=[^\n]*", RegexOptions.IgnoreCase);
                //currentItem = "Grabbing enableShopify";
                //MatchEnableShopify = Regex.Match(configInput, @"enableShopify=\w+", RegexOptions.IgnoreCase);
                //currentItem = "Grabbing shopifyAPIKey";
                //MatchShopifyAPIKey = Regex.Match(configInput, @"shopifyAPIKey=[^\n]*", RegexOptions.IgnoreCase);
                //currentItem = "Grabbing shopifyLink";
                //MatchShopifyLink = Regex.Match(configInput, @"shopifyLink=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableBouncingBetty";
                MatchEnableBouncingBetty = Regex.Match(configInput, @"enableBouncingBetty=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing bettiesPerPlayer";
                MatchBettiesPerPlayer = Regex.Match(configInput, @"bettiesPerPlayer=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing bettyArmingDelay";
                MatchBettyArmingDelay = Regex.Match(configInput, @"bettyArmingDelay=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing bettyNearOtherHouses";
                MatchBettyNearOtherHouses = Regex.Match(configInput, @"bettyNearOtherHouses=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing distanceFromOtherHouses";
                MatchDistanceFromOtherHouses = Regex.Match(configInput, @"distanceFromOtherHouses=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing ownerActivateBetty";
                MatchOwnerActivateBetty = Regex.Match(configInput, @"ownerActivateBetty=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing factionActivateBetty";
                MatchFactionActivateBetty = Regex.Match(configInput, @"factionActivateBetty=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing allyActivateBetty";
                MatchAllyActivateBetty = Regex.Match(configInput, @"allyActivateBetty=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing bettyHurtOwner";
                MatchBettyHurtOwner = Regex.Match(configInput, @"bettyHurtOwner=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing bettyHurtFaction";
                MatchBettyHurtFaction = Regex.Match(configInput, @"bettyHurtFaction=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing bettyHurtAlly";
                MatchBettyHurtAlly = Regex.Match(configInput, @"bettyHurtAlly=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing ownerPickupBetty";
                MatchOwnerPickupBetty = Regex.Match(configInput, @"ownerPickupBetty=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing factionPickupBetty";
                MatchFactionPickupBetty = Regex.Match(configInput, @"factionPickupBetty=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing allyPickupBetty";
                MatchAllyPickupBetty = Regex.Match(configInput, @"allyPickupBetty=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing neutralPickupBetty";
                MatchNeutralPickupBetty = Regex.Match(configInput, @"neutralPickupBetty=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing returnBettyMaterials";
                MatchReturnBettyMaterials = Regex.Match(configInput, @"returnBettyMaterials=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing bettyDeathDeleteItems";
                MatchBettyDeathDeleteItems = Regex.Match(configInput, @"bettyDeathDeleteItems=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing activateRadius";
                MatchActivateRadius = Regex.Match(configInput, @"activateRadius=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing breakLegsRadius";
                MatchBreakLegsRadius = Regex.Match(configInput, @"breakLegsRadius=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing bleedingRadius";
                MatchBleedingRadius = Regex.Match(configInput, @"bleedingRadius=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing hurtRadius";
                MatchHurtRadius = Regex.Match(configInput, @"hurtRadius=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing maxBettyPlayerDamage";
                MatchMaxBettyPlayerDamage = Regex.Match(configInput, @"maxBettyPlayerDamage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing maxBettyObjectDamage";
                MatchMaxBettyObjectDamage = Regex.Match(configInput, @"maxBettyObjectDamage=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing enableAntiFamilyShare";
                MatchEnableAntiFamilyShare = Regex.Match(configInput, @"enableAntiFamilyShare=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing steamAPIKey";
                MatchSteamAPIKey = Regex.Match(configInput, @"steamAPIKey=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing excludeFromFamilyCheck";
                MatchExcludeFromFamilyCheck = Regex.Match(configInput, @"excludeFromFamilyCheck=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing defaultLightsRange";
                MatchDefaultLightsRange = Regex.Match(configInput, @"defaultLightsRange=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing maxLightsRange";
                MatchMaxLightsRange = Regex.Match(configInput, @"maxLightsRange=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing maxLightsPerHouse";
                MatchMaxLightsPerHouse = Regex.Match(configInput, @"maxLightsPerHouse=[^\n]*", RegexOptions.IgnoreCase);
                currentItem = "Grabbing maxLightsPerPerson";
                MatchMaxLightsPerPerson = Regex.Match(configInput, @"maxLightsPerPerson=[^\n]*", RegexOptions.IgnoreCase);

                currentItem = "Setting enabledWhitelist";
                enabledWhitelist = MatchEnabledWhitelist.ToString().Split('=')[1];
                //MySQL = MatchMySQL.ToString().Split('=')[1];
                currentItem = "Setting useSteamGroup";
                useSteamGroup = MatchUseSteamGroup.ToString().Split('=')[1];
                currentItem = "Setting steamGroupName";
                steamGroup = MatchSteamGroup.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting autoRefresh";
                autoRefresh = MatchAutoRefresh.ToString().Split('=')[1];
                currentItem = "Setting refreshInterval";
                refreshInterval = MatchRefreshInterval.ToString().Split('=')[1];
                currentItem = "Setting useAsMembers";
                useAsMembers = MatchUseAsMembers.ToString().Split('=')[1];
                currentItem = "Setting whitelistKickCMD";
                whitelistKickCMD = MatchWhitelistKickCMD.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting whitelistKickJoin";
                whitelistKickJoin = MatchWhitelistKickJoin.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting whitelistCheckGood";
                whitelistCheckGood = MatchWhitelistGood.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting whitelistCheckBad";
                whitelistCheckBad = MatchWhitelistBad.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting announceDrops";
                announceDrops = MatchAnnounceDrops.ToString().Split('=')[1];
                currentItem = "Setting onFirstPlayer";
                onFirstPlayer = MatchOnFirstPlayer.ToString().Split('=')[1];
                currentItem = "Setting dropInterval";
                dropInterval = MatchDropInterval.ToString().Split('=')[1];
                currentItem = "Setting dropTime";
                dropTime = MatchDropTime.ToString().Split('=')[1];
                currentItem = "Setting dropMode";
                dropMode = MatchDropMode.ToString().Split('=')[1];
                currentItem = "Setting minimumPlayers";
                minimumPlayers = MatchMinimumPlayers.ToString().Split('=')[1];
                currentItem = "Setting planeCount";
                planeCount = MatchPlaneCount.ToString().Split('=')[1];
                currentItem = "Setting minimumCrates";
                minimumCrates = MatchMinimumCrates.ToString().Split('=')[1];
                currentItem = "Setting maximumCrates";
                maximumCrates = MatchMaximumCrates.ToString().Split('=')[1];
                currentItem = "Setting startTime";
                startTime = MatchStartTime.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting dayLength";
                dayLength = MatchDayLength.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting nightLength";
                nightLength = MatchNightLength.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting freezeTime";
                freezeTime = MatchFreezeTime.ToString().Split('=')[1];
                currentItem = "Setting constantFullMoon";
                constantFullMoon = MatchConstantFullMoon.ToString().Split('=')[1];
                currentItem = "Setting fallDamage";
                fallDamage = MatchFallDamage.ToString().Split('=')[1];
                currentItem = "Setting enableFallSound";
                enableFallSound = MatchEnableFallSound.ToString().Split('=')[1];
                currentItem = "Setting voiceDistance";
                voiceDistance = MatchVoiceDistance.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableRepair";
                enableRepair = MatchEnableRepair.ToString().Split('=')[1];
                currentItem = "Setting doorStops";
                doorStops = MatchDoorStops.ToString().Split('=')[1];
                currentItem = "Setting enableDurability";
                enableDurability = MatchEnableDurability.ToString().Split('=')[1];
                currentItem = "Setting enableDoorHolding";
                enableDoorHolding = MatchEnableDoorHolding.ToString().Split('=')[1];
                currentItem = "Setting enableKeepItems";
                enableKeepItems = MatchEnableKeepItems.ToString().Split('=')[1];
                currentItem = "Setting forceNudity";
                forceNudity = MatchForceNudity.ToString().Split('=')[1];
                currentItem = "Setting onlyOnJoin";
                onlyOnJoin = MatchOnlyOnJoin.ToString().Split('=')[1];
                currentItem = "Setting nudityRefreshInterval";
                nudityRefreshInterval = MatchNudityRefreshInterval.ToString().Split('=')[1];
                currentItem = "Setting directChat";
                directChat = MatchDirectChat.ToString().Split('=')[1];
                currentItem = "Setting globalChat";
                globalChat = MatchGlobalChat.ToString().Split('=')[1];
                currentItem = "Setting removeTag";
                removeTag = MatchRemoveTag.ToString().Split('=')[1];
                currentItem = "Setting defaultChat";
                defaultChat = MatchDefaultChat.ToString().Split('=')[1];
                currentItem = "Setting directDistance";
                directDistance = MatchDirectDistance.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting allowedChars";
                allowedChars = MatchAllowedChars.ToString().Substring(MatchAllowedChars.ToString().IndexOf('=') + 1).Replace("\r", "");
                currentItem = "Setting restrictChars";
                restrictChars = MatchRestrictChars.ToString().Split('=')[1];
                currentItem = "Setting minimumNameCount";
                minimumNameCount = MatchMinimumNameCount.ToString().Split('=')[1];
                currentItem = "Setting maximumNameCount";
                maximumNameCount = MatchMaximumNameCount.ToString().Split('=')[1];
                currentItem = "Setting kickDuplicate";
                kickDuplicate = MatchKickDuplicate.ToString().Split('=')[1];
                currentItem = "Setting lowerAuthority";
                lowerAuthority = MatchLowerAuthority.ToString().Split('=')[1];
                currentItem = "Setting illegalWords";
                illegalWords = MatchIllegalWords.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting censorship";
                censorship = MatchCensorship.ToString().Split('=')[1];
                currentItem = "Setting botName";
                botName = MatchBotName.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting defaultColor";
                defaultColor = MatchDefaultColor.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting serverIP";
                serverIP = MatchServerIP.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting versionOnJoin";
                versionOnJoin = MatchVersionOnJoin.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting joinMessage";
                joinMessage = MatchJoinMessage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableJoin";
                enableJoin = MatchEnableJoin.ToString().Split('=')[1];
                currentItem = "Setting leaveMessage";
                leaveMessage = MatchLeaveMessage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableLeave";
                enableLeave = MatchEnableLeave.ToString().Split('=')[1];
                currentItem = "Setting suicideMessage";
                suicideMessage = MatchSuicideMessage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableSuicide";
                enableSuicide = MatchEnableSuicide.ToString().Split('=')[1];
                currentItem = "Setting murderMessage";
                murderMessage = MatchMurderMessage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting murderMessageUnknown";
                murderMessageUnknown = MatchMurderMessageUnknown.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableMurder";
                enableMurder = MatchEnableMurder.ToString().Split('=')[1];
                currentItem = "Setting deathMessage";
                deathMessage = MatchDeathMessage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableDeath";
                enableDeath = MatchEnableDeath.ToString().Split('=')[1];
                currentItem = "Setting dropItemMessage";
                dropItemMessage = MatchDropItemMessage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting hideKills";
                hideKills = MatchHideKills.ToString().Split('=')[1];
                currentItem = "Setting killsToConsole";
                killsToConsole = MatchKillsToConsole.ToString().Split('=')[1];
                currentItem = "Setting includePositionsInLog";
                includePositionsInLog = MatchIncludePositionsInLog.ToString().Split('=')[1];
                currentItem = "Setting unknownCommand";
                unknownCommand = MatchUnknownCommand.ToString().Split('=')[1];
                currentItem = "Setting nextToName";
                nextToName = MatchNextToName.ToString().Split('=')[1];
                currentItem = "Setting removePrefix";
                removePrefix = MatchRemovePrefix.ToString().Split('=')[1];
                currentItem = "Setting enableWordWrap";
                enableWordWrap = MatchEnableWordWrap.ToString().Split('=')[1];
                currentItem = "Setting wordWrapLimit";
                wordWrapLimit = MatchWordWrapLimit.ToString().Split('=')[1];
                currentItem = "Setting sunBasedCompass";
                sunBasedCompass = MatchSunBasedCompass.ToString().Split('=')[1];
                currentItem = "Setting sendChatToConsoles";
                sendChatToConsoles = MatchSendChatToConsoles.ToString().Split('=')[1];
                currentItem = "Setting dropdownKillMessage";
                dropdownKillMessage = MatchDropdownKillMessage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableDropdownKills";
                enableDropdownKills = MatchEnableDropdownKills.ToString().Split('=')[1];
                currentItem = "Setting enableAllyName";
                enableAllyName = MatchEnableAllyName.ToString().Split('=')[1];
                currentItem = "Setting enableDropdownFactionHits";
                enableDropdownFactionHits = MatchEnableDropdownFactionHits.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableDropdownAllyHits";
                enableDropdownAllyHits = MatchEnableDropdownAllyHits.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableConsoleLogging";
                enableConsoleLogging = MatchEnableConsoleLogging.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableChatLogging";
                enableChatLogging = MatchEnableChatLogging.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting logModMessages";
                logPluginChat = MatchPluginChat.ToString().Split('=')[1];
                currentItem = "Setting chatLogCap";
                chatLogCap = MatchChatLogCap.ToString().Split('=')[1];
                currentItem = "Setting logCap";
                logCap = MatchLogCap.ToString().Split('=')[1];
                currentItem = "Setting logBroadcastErrors";
                logBroadcastErrors = MatchLogBroadcastErrors.ToString().Split('=')[1];
                currentItem = "Setting catchBroadcastErrors";
                catchBroadcastErrors = MatchCatchBroadcastErrors.ToString().Split('=')[1];
                currentItem = "Setting disconnectEvenIfNull";
                disconnectEvenIfNull = MatchDisconnectEvenIfNull.ToString().Split('=')[1];
                currentItem = "Setting logBedPlacements";
                logBedPlacements = MatchLogBedPlacements.ToString().Split('=')[1];
                currentItem = "Setting storageLogCap";
                storageLogCap = MatchStorageLogCap.ToString().Split('=')[1];
                currentItem = "Setting enableStorageLogs";
                enableStorageLogs = MatchEnableStorageLogs.ToString().Split('=')[1];
                currentItem = "Setting logStorageTransfer";
                logStorageTransfer = MatchLogStorageTransfer.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting sleeperDeathLogsCap";
                sleeperDeathLogsCap = MatchSleeperDeathLogsCap.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableSleeperDeathLogs";
                enableSleeperDeathLogs = MatchEnableSleeperDeathLogs.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting teleportRequest";
                teleportRequest = MatchTeleportRequest.ToString().Split('=')[1];
                currentItem = "Setting requestDelay";
                requestDelay = MatchRequestDelay.ToString().Split('=')[1];
                currentItem = "Setting warpDelay";
                warpDelay = MatchWarpDelay.ToString().Split('=')[1];
                currentItem = "Setting requestCooldownType";
                requestCooldownType = MatchRequestCooldownType.ToString().Split('=')[1];
                currentItem = "Setting requestCooldown";
                requestCooldown = MatchRequestCooldown.ToString().Split('=')[1];
                currentItem = "Setting denyRequestWarzone";
                denyRequestWarzone = MatchDenyRequestWarzone.ToString().Split('=')[1];
                currentItem = "Setting enableInHouse";
                enableInHouse = MatchEnableInHouse.ToString().Split('=')[1];
                currentItem = "Setting wandDistance";
                wandDistance = MatchWandDistance.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting wandTool";
                wandTool = MatchWandTool.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting portalTool";
                portalTool = MatchPortalTool.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting freezeRefreshDelay";
                freezeRefreshDelay = MatchFreezeRefreshDelay.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting freezeDistance";
                freezeDistance = MatchFreezeDistance.ToString().Split('=')[1].Replace("\r", "");
                //host = MatchHost.ToString().Split('=')[1];
                //port = MatchPort.ToString().Split('=')[1];
                //database = MatchDatabase.ToString().Split('=')[1];
                //user = MatchUser.ToString().Split('=')[1];
                //pass = MatchPass.ToString().Split('=')[1];
                currentItem = "Setting inheritCommands";
                inheritCommands = MatchCommandInheritance.ToString().Split('=')[1];
                currentItem = "Setting inheritKits";
                inheritKits = MatchKitInheritance.ToString().Split('=')[1];
                currentItem = "Setting inheritWarps";
                inheritWarps = MatchWarpInheritance.ToString().Split('=')[1];
                currentItem = "Setting neutralDamage";
                neutralDamage = MatchNeutralDamage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting friendlyDamage";
                friendlyDamage = MatchFriendlyDamage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting allyDamage";
                alliedDamage = MatchAlliedDamage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting warDamage";
                warDamage = MatchWarDamage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting warFriendlyDamage";
                warFriendlyDamage = MatchWarFriendlyDamage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting warAllyDamage";
                warAllyDamage = MatchWarAllyDamage.ToString().Split('=')[1].Replace("\r", "");
                //researchAtBench = MatchResearchAtBench.ToString().Split('=')[1];
                currentItem = "Setting infAmmoClipSize";
                infAmmoClipSize = MatchInfAmmoClipSize.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting infiniteResearch";
                infiniteResearch = MatchInfiniteResearch.ToString().Split('=')[1];
                currentItem = "Setting researchPaper";
                researchPaper = MatchResearchPaper.ToString().Split('=')[1];
                //craftAtBench = MatchCraftAtBench.ToString().Split('=')[1];
                currentItem = "Setting removeOnDeath";
                removeOnDeath = MatchRemoveOnDeath.ToString().Split('=')[1];
                currentItem = "Setting removeOnDisconnect";
                removeOnDisconnect = MatchRemoveOnDisconnect.ToString().Split('=')[1];
                currentItem = "Setting enableDropItem";
                enableDropItem = MatchEnableDropItem.ToString().Split('=')[1];
                currentItem = "Setting enableRemover";
                enableRemover = MatchEnableRemover.ToString().Split('=')[1];
                currentItem = "Setting returnItems";
                returnItems = MatchReturnItems.ToString().Split('=')[1];
                currentItem = "Setting removerAttackDelay";
                removerAttackDelay = MatchRemoverAttackDelay.ToString().Split('=')[1];
                currentItem = "Setting disregardCeilingWeight";
                disregardCeilingWeight = MatchDisregardCeilingWeight.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting disregardPillarWeight";
                disregardPillarWeight = MatchDisregardPillarWeight.ToString().Split('=')[1];
                currentItem = "Setting disregardFoundationWeight";
                disregardFoundationWeight = MatchDisregardFoundationWeight.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableTRSVoting";
                enableTRSVoting = MatchEnableTRSVoting.ToString().Split('=')[1];
                currentItem = "Setting TRSAPIKey";
                TRSAPIKey = MatchTRSAPIKey.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting TRSvoteLink";
                TRSvoteLink = MatchTRSVoteLink.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting TRSvotingMessage";
                TRSvotingMessage = MatchTRSVotingMessage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableRSVoting";
                enableRSVoting = MatchEnableRSVoting.ToString().Split('=')[1];

                foreach (string line in configLines)
                {
                    if (line.StartsWith("RSAPIKey="))
                    {
                        currentItem = "Setting RSAPIKey";
                        if (line.Length > line.IndexOf('=') + 1)
                        {
                            RSAPIKey = line.Substring(line.IndexOf('=') + 1);
                        }
                    }
                    if (line.StartsWith("RSvoteLink="))
                    {
                        currentItem = "Setting RSvoteLink";
                        if (line.Length > line.IndexOf('=') + 1)
                        {
                            RSvoteLink = line.Substring(line.IndexOf('=') + 1);
                        }
                    }
                    if (line.StartsWith("RSvotingMessage="))
                    {
                        currentItem = "Setting RSvotingMessage";
                        if (line.Length > line.IndexOf('=') + 1)
                        {
                            RSvotingMessage = line.Substring(line.IndexOf('=') + 1);
                        }
                    }
                }
                //RSAPIKey = MatchRSAPIKey.ToString().Split('=')[1].Replace("\r", "");
                //RSvoteLink = MatchRSVoteLink.ToString().Split('=')[1].Replace("\r", "");
                //RSvotingMessage = MatchRSVotingMessage.ToString().Split('=')[1].Replace("\r", "");

                currentItem = "Setting enableRank";
                enableRank = MatchEnableRank.ToString().Split('=')[1];
                currentItem = "Setting checkIfInZone";
                checkIfInZone = MatchCheckIfInZone.ToString().Split('=')[1];
                currentItem = "Setting enableLimitedSleepers";
                enableLimitedSleepers = MatchEnableLimitedSleepers.ToString().Split('=')[1];
                currentItem = "Setting sleeperElapseInterval";
                sleeperElapseInterval = MatchSleeperElapseInterval.ToString().Split('=')[1];
                currentItem = "Setting excludeFromSleepers";
                excludeFromSleepers = MatchExcludeFromSleepers.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting checkMode";
                checkMode = MatchCheckMode.ToString().Split('=')[1];
                currentItem = "Setting enableAntiSpeed";
                enableAntiSpeed = MatchEnableAntiSpeed.ToString().Split('=')[1];
                currentItem = "Setting enableAntiJump";
                enableAntiJump = MatchEnableAntiJump.ToString().Split('=')[1];
                currentItem = "Setting enableAntiBP";
                enableAntiBP = MatchEnableAntiBP.ToString().Split('=')[1];
                currentItem = "Setting enableAntiAW";
                enableAntiAW = MatchEnableAntiAW.ToString().Split('=')[1];
                currentItem = "Setting enableAntiRange";
                enableAntiRange = MatchEnableAntiRange.ToString().Split('=')[1];
                currentItem = "Setting rangeFlexibility";
                rangeFlexibility = MatchRangeFlexibility.ToString().Split('=')[1];
                currentItem = "Setting violationLimit";
                violationLimit = MatchViolationLimit.ToString().Split('=')[1];
                currentItem = "Setting maximumSpeed";
                maximumSpeed = MatchMaximumSpeed.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting maximumJumpSpeed";
                maximumJumpSpeed = MatchMaximumJumpSpeed.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting calculateInterval";
                calculateInterval = MatchCalculateInterval.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting moveBackSpeed";
                moveBackSpeed = MatchMoveBackSpeed.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting moveBackJump";
                moveBackJump = MatchMoveBackJump.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting lowerViolationInterval";
                lowerViolationInterval = MatchLowerViolationInterval.ToString().Split('=')[1];
                currentItem = "Setting sendAHToConsole";
                sendAHToConsole = MatchSendAHToConsole.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting bedAndBagDistance";
                bedAndBagDistance = MatchBedAndBagDistance.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting gatewayDistance";
                gatewayDistance = MatchGatewayDistance.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting rockMultiplier";
                rockMultiplier = MatchRockMultiplier.ToString().Split('=')[1];
                currentItem = "Setting sHatchetMultiplier";
                sHatchetMultiplier = MatchSHatchetMultiplier.ToString().Split('=')[1];
                currentItem = "Setting hatchetMultiplier";
                hatchetMultiplier = MatchHatchetMultiplier.ToString().Split('=')[1];
                currentItem = "Setting pickaxeMultiplier";
                pickaxeMultiplier = MatchPickAxeMultiplier.ToString().Split('=')[1];
                currentItem = "Setting overrideWoodResources";
                overrideWoodResources = MatchOverrideWoodResources.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting overrideOreResources";
                overrideOreResources = MatchOverrideOreResources.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting overrideAIResources";
                overrideAIResources = MatchOverrideAIResources.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting multiplyMaxWood";
                multiplyMaxWood = MatchMultiplyMaxWood.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting multiplyMaxOre";
                multiplyMaxOre = MatchMultiplyMaxOre.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting multiplyMaxAIResources";
                multiplyMaxAIResources = MatchMultiplyMaxAIResources.ToString().Split('=')[1].Replace("\r", "");
                //currentItem = "Setting enableShopify";
                //enableShopify = MatchEnableShopify.ToString().Split('=')[1];
                //currentItem = "Setting shopifyAPIKey";
                //shopifyAPIKey = MatchShopifyAPIKey.ToString().Split('=')[1].Replace("\r", "");
                //currentItem = "Setting shopifyLink";
                //shopifyLink = MatchShopifyLink.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableBouncingBetty";
                enableBouncingBetty = MatchEnableBouncingBetty.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting bettiesPerPlayer";
                bettiesPerPlayer = MatchBettiesPerPlayer.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting bettyArmingDelay";
                bettyArmingDelay = MatchBettyArmingDelay.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting bettyNearOtherHouses";
                bettyNearOtherHouses = MatchBettyNearOtherHouses.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting distanceFromOtherHouses";
                distanceFromOtherHouses = MatchDistanceFromOtherHouses.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting ownerActivateBetty";
                ownerActivateBetty = MatchOwnerActivateBetty.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting factionActivateBetty";
                factionActivateBetty = MatchFactionActivateBetty.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting allyActivateBetty";
                allyActivateBetty = MatchAllyActivateBetty.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting bettyHurtOwner";
                bettyHurtOwner = MatchBettyHurtOwner.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting bettyHurtFaction";
                bettyHurtFaction = MatchBettyHurtFaction.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting bettyHurtAlly";
                bettyHurtAlly = MatchBettyHurtAlly.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting ownerPickupBetty";
                ownerPickupBetty = MatchOwnerPickupBetty.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting factionPickupBetty";
                factionPickupBetty = MatchFactionPickupBetty.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting allyPickupBetty";
                allyPickupBetty = MatchAllyPickupBetty.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting neutralPickupBetty";
                neutralPickupBetty = MatchNeutralPickupBetty.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting returnBettyMaterials";
                returnBettyMaterials = MatchReturnBettyMaterials.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting bettyDeathDeleteItems";
                bettyDeathDeleteItems = MatchBettyDeathDeleteItems.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting activateRadius";
                activateRadius = MatchActivateRadius.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting breakLegsRadius";
                breakLegsRadius = MatchBreakLegsRadius.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting bleedingRadius";
                bleedingRadius = MatchBleedingRadius.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting hurtRadius";
                hurtRadius = MatchHurtRadius.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting maxBettyPlayerDamage";
                maxBettyPlayerDamage = MatchMaxBettyPlayerDamage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting maxBettyObjectDamage";
                maxBettyObjectDamage = MatchMaxBettyObjectDamage.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting enableAntiFamilyShare";
                enableAntiFamilyShare = MatchEnableAntiFamilyShare.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting steamAPIKey";
                steamAPIKey = MatchSteamAPIKey.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting excludeFromFamilyCheck";
                excludeFromFamilyCheck = MatchExcludeFromFamilyCheck.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting defaultLightsRange";
                defaultLightsRange = MatchDefaultLightsRange.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting maxLightsRange";
                maxLightsRange = MatchMaxLightsRange.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting maxLightsPerHouse";
                maxLightsPerHouse = MatchMaxLightsPerHouse.ToString().Split('=')[1].Replace("\r", "");
                currentItem = "Setting maxLightsPerPerson";
                maxLightsPerPerson = MatchMaxLightsPerPerson.ToString().Split('=')[1].Replace("\r", "");
                return true;
            }
            catch (Exception ex)
            {
                Vars.conLog.Error("Config file not loaded successfully! Error at:");
                Vars.conLog.Error(currentItem);
                return false;
            }
        }
    }
}