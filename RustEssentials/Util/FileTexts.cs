using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RustEssentials.Util
{
    public static class FileTexts
    {
        public static StringBuilder cfgText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("[Whitelist]");
            sb.AppendLine("# Enable whitelist upon server startup.");
            sb.AppendLine("enableWhitelist=false");
            //sb.AppendLine("# Use the MySQL settings defined below for whitelisting - BROKEN");
            //sb.AppendLine("useMySQL=false");
            sb.AppendLine("# Use the Steam Group specified as the whitelist.");
            sb.AppendLine("useSteamGroup=false");
            sb.AppendLine("steamGroupName=");
            sb.AppendLine("# Auto refresh the whitelist every time the interval elapses.");
            sb.AppendLine("autoRefresh=true");
            sb.AppendLine("# Auto refresh interval in seconds.");
            sb.AppendLine("refreshInterval=10");
            sb.AppendLine("# Users in whitelist will become [Member]s.");
            sb.AppendLine("useAsMembers=false");
            sb.AppendLine("# The message that is sent to unwhitelisted users upon /whitelist kick.");
            sb.AppendLine("whitelistKickCMD=Whitelist was enabled and you were not whitelisted.");
            sb.AppendLine("# The message that is sent to unwhitelisted users upon join.");
            sb.AppendLine("whitelistKickJoin=You are not whitelisted!");
            sb.AppendLine("# The message that is sent to sender upon /whitelist check IF whitelisted.");
            sb.AppendLine("whitelistCheckGood=You are whitelisted!");
            sb.AppendLine("# The message that is sent to sender upon /whitelist check IF NOT whitelisted.");
            sb.AppendLine("whitelistCheckBad=You are not whitelisted!");
            sb.AppendLine("");
            sb.AppendLine("[Airdrop]");
            sb.AppendLine("# Announce the coming of an airdrop from /airdrop or from a cycled airdrop.");
            sb.AppendLine("announceDrops=true");
            sb.AppendLine("# If true, an airdrop will spawn once the first player since the last restart joins.");
            sb.AppendLine("onFirstPlayer=false");
            sb.AppendLine("# When should airdrops drop after server start if dropMode is 1 (Default 1h for 1 hour after server start).");
            sb.AppendLine("dropInterval=1h");
            sb.AppendLine("# What time of day should airdrops drop if dropMode is 0 (Default 12 for noon).");
            sb.AppendLine("dropTime=12");
            sb.AppendLine("# Sets the dropMode (0 for dropTime, 1 for dropInterval).");
            sb.AppendLine("dropMode=0");
            sb.AppendLine("# How many players need to be on in order for a cycle airdrop to spawn.");
            sb.AppendLine("minimumPlayers=1");
            sb.AppendLine("# How many planes should be spawned in a cycled airdrop.");
            sb.AppendLine("planeCount=1");
            sb.AppendLine("# Sets the minimum possible amount of crates in an airdrop.");
            sb.AppendLine("minimumCrates=1");
            sb.AppendLine("# Sets the maximum possible amount of crates in an airdrop.");
            sb.AppendLine("maximumCrates=3");
            sb.AppendLine("");
            sb.AppendLine("[Environment]");
            sb.AppendLine("# Set the time of day upon server start.");
            sb.AppendLine("startTime=12");
            sb.AppendLine("# Set the day length in minutes upon server start (Default 45 minutes).");
            sb.AppendLine("dayLength=45");
            sb.AppendLine("# Set the night length in minutes upon server start (Default 15 minutes).");
            sb.AppendLine("nightLength=15");
            sb.AppendLine("# Freeze time upon server start.");
            sb.AppendLine("freezeTime=false");
            sb.AppendLine("# If true, every night will be a full moon.");
            sb.AppendLine("constantFullMoon=false");
            sb.AppendLine("# Set fall damage server-wide.");
            sb.AppendLine("fallDamage=true");
            sb.AppendLine("# Enable or disable the fall impact sound/leg breaking (THIS WILL ONLY TAKE AFFECT IF FALL DAMAGE IS OFF).");
            sb.AppendLine("enableFallSound=true");
            sb.AppendLine("# Set distance at which you can hear players in direct voice chat (Default 100).");
            sb.AppendLine("voiceDistance=100");
            sb.AppendLine("# Enables repairing of structures.");
            sb.AppendLine("enableRepair=true");
            sb.AppendLine("# Sets the creations of door stops after the door has been destroyed.");
            sb.AppendLine("doorStops=true");
            sb.AppendLine("# Sets the use of durability on items. If false, items will not lose durability.");
            sb.AppendLine("enableDurability=true");
            sb.AppendLine("# If true, users can \"hold\" doors and prevent other users from opening them.");
            sb.AppendLine("enableDoorHolding=false");
            sb.AppendLine("# Sets whether or not a player's items should drop after they die.");
            sb.AppendLine("enableKeepItems=false");
            sb.AppendLine("");
            sb.AppendLine("# Nudity is dangerous territory. If it causes crashes/errors, turn it off.");
            sb.AppendLine("[Nudity]");
            sb.AppendLine("# Forces all players to be naked.");
            sb.AppendLine("forceNudity=false");
            sb.AppendLine("# Instead of automatically refreshing nudity, nudity will only be forced one time each when a player joins.");
            sb.AppendLine("onlyOnJoin=false");
            sb.AppendLine("# If onlyOnJoin is false, this will set the refresh rate at which nudity will be forced (in seconds).");
            sb.AppendLine("nudityRefreshInterval=5");
            sb.AppendLine("");
            sb.AppendLine("[Chat]");
            sb.AppendLine("# Enables or disables direct chat. ATLEAST ONE MUST BE ENABLED!");
            sb.AppendLine("directChat=false");
            sb.AppendLine("# Enables or disables global chat. ATLEAST ONE MUST BE ENABLED!");
            sb.AppendLine("globalChat=true");
            sb.AppendLine("# Toggles the display of the <g> tag if global is the only channel enabled.");
            sb.AppendLine("removeTag=true");
            sb.AppendLine("# Sets the default chat players will talk in upon join. (global or direct).");
            sb.AppendLine("defaultChat=global");
            sb.AppendLine("# Sets the distance the radius of possible text communication when in direct chat.");
            sb.AppendLine("directDistance=150");
            sb.AppendLine("# Sets the characters a player can have in his name.");
            sb.AppendLine("allowedChars=a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,1,2,3,4,5,6,7,8,9,0,`,-,=,',.,[,],(,),{,},~,_");
            sb.AppendLine("# If false, players can have anything they want in their names with no restrictions.");
            sb.AppendLine("restrictChars=true");
            sb.AppendLine("# Minimum amount of characters a player must have in his name.");
            sb.AppendLine("minimumNameCount=3");
            sb.AppendLine("# Maximum amount of characters a player can have in his name.");
            sb.AppendLine("maximumNameCount=15");
            sb.AppendLine("# If a player that is joining has a name that is currently in use on the server and kickDuplicate is true, kick him. If false, append \"(#1,2,3,etc..)\" to his name.");
            sb.AppendLine("kickDuplicate=false");
            sb.AppendLine("# If kickDuplicate is true, lowerAuthority is true, and a joining user has the same name as a connected user, the user of lower authority will be kicked.");
            sb.AppendLine("lowerAuthority=false");
            sb.AppendLine("# Illegal words for use with censorship.");
            sb.AppendLine("illegalWords=fuck,shit,cunt,bitch,pussy,slut,whore,ass");
            sb.AppendLine("# If a player joins with a word in the illegalWords list and censorship is true, he will be kicked. Words in chat found in illegalWords will be replaced with *'s.");
            sb.AppendLine("censorship=false");
            sb.AppendLine("");
            sb.AppendLine("[Messages]");
            sb.AppendLine("# Name that the plugin bot will use to PM and chat with (Default RustEssentials).");
            sb.AppendLine("botName=RustEssentials");
            sb.AppendLine("# Sets the color for the mod's messages when broadcasted in chat (Default #66CCFF) - uses HTML.");
            sb.AppendLine("defaultColor=#66CCFF");
            sb.AppendLine("# Sets the server IP for /info. If this is left blank, it will grab the IP online (which may find an incorrect IP).");
            sb.AppendLine("serverIP=");
            sb.AppendLine("# Join message that is displayed to all when a user joins (Default \"Player $USER$ has joined.\").");
            sb.AppendLine("joinMessage=Player $USER$ has joined.");
            sb.AppendLine("# Enables or disables the display of join messages.");
            sb.AppendLine("enableJoin=true");
            sb.AppendLine("# Leave message that is displayed to all when a user leaves (Default \"Player $USER$ has left.\").");
            sb.AppendLine("leaveMessage=Player $USER$ has left.");
            sb.AppendLine("# Enables or disables the display of leave messages");
            sb.AppendLine("enableLeave=true");
            sb.AppendLine("# Suicide message that is displayed to all when a user commits suicide (Tags: $VICTIM$).");
            sb.AppendLine("suicideMessage=$VICTIM$ killed himself.");
            sb.AppendLine("# Enables or disables the display of suicide messages");
            sb.AppendLine("enableSuicide=true");
            sb.AppendLine("# Murder message that is displayed to all when a user is murdered by another user (Tags: $VICTIM$, $KILLER$, $WEAPON$, $PART$, $DISTANCE$).");
            sb.AppendLine("murderMessage=$KILLER$ [ $WEAPON$ | $PART$ | $DISTANCE$ ] $VICTIM$");
            sb.AppendLine("# Murder message that is displayed to all when a user is murdered by another user with an unknown cause (Tags: $VICTIM$, $KILLER$, $PART$, $DISTANCE$).");
            sb.AppendLine("murderMessageUnknown=$KILLER$ killed $VICTIM$ [ $PART$ | $DISTANCE$ ].");
            sb.AppendLine("# Enables or disables the display of murder messages");
            sb.AppendLine("enableMurder=true");
            sb.AppendLine("# Death message that is displayed to all when a user is killed by a mob (Tags: $VICTIM$, $KILLER$).");
            sb.AppendLine("deathMessage=$VICTIM$ was mauled by a $KILLER$.");
            sb.AppendLine("# Enables or disables the display of death messages.");
            sb.AppendLine("enableDeath=true");
            sb.AppendLine("# Message that is displayed to a user when they are given an item and their inventory is full.");
            sb.AppendLine("dropItemMessage=Your inventory is full! All given items will now be dropped at your feet until otherwise.");
            sb.AppendLine("# If true, death, murder, and suicide messages will only show in the logs, not chat.");
            sb.AppendLine("hideKills=false");
            sb.AppendLine("# If true, death, murder, and suicide messages will also be sent to the console.");
            sb.AppendLine("killsToConsole=false");
            sb.AppendLine("# If true, death, murder, and suicide messages will include the position of the killer/victim in the logs (and console if killsToConsole is true).");
            sb.AppendLine("includePositionsInLog=false");
            sb.AppendLine("# Enables/Disables the display of \"Unknown Command\" when an unrecognized command is typed.");
            sb.AppendLine("unknownCommand=true");
            sb.AppendLine("# Enables/Disables the display of [PM to] and [PM from] in front of the user's name. If false, it will display before the message.");
            sb.AppendLine("nextToName=true");
            sb.AppendLine("# Toggles the display of a user's rank prefix.");
            sb.AppendLine("removePrefix=false");
            sb.AppendLine("# If the length of a message is over the wordWrapLimit, the message will be wrapped into multiple messages.");
            sb.AppendLine("enableWordWrap=true");
            sb.AppendLine("# The limit at which the length of a message can be before being wrapped into multiple messages.");
            sb.AppendLine("wordWrapLimit=95");
            sb.AppendLine("# If true, the compass will be based off the sun (sun rises in the east, sets in the west). Otherwise, the compass will be map based (sun rises in the south west, sets in the north east).");
            sb.AppendLine("sunBasedCompass=false");
            sb.AppendLine("# Sends chat messages to players' F1 consoles.");
            sb.AppendLine("sendChatToConsoles=true");
            sb.AppendLine("# Murder message that is displayed to the killer when they kill a player (Tags: $VICTIM$, $PART$, $DISTANCE$).");
            sb.AppendLine("dropdownKillMessage=You killed $VICTIM$ [ $PART$ | $DISTANCE$ ]");
            sb.AppendLine("# If true, a dropdown message will appear to killers after they kill a victim.");
            sb.AppendLine("enableDropdownKills=true");
            sb.AppendLine("# If true, the message that appears when a player shoots an ally will include the name of the ally instead of just 'ally'.");
            sb.AppendLine("enableAllyName=false");
            sb.AppendLine("# If true, the message that appears when a player shoots a faction mate will dropdown from the top of the screen instead of from the side.");
            sb.AppendLine("enableDropdownFactionHits=true");
            sb.AppendLine("# If true, the message that appears when a player shoots an ally will dropdown from the top of the screen instead of from the side.");
            sb.AppendLine("enableDropdownAllyHits=false");
            sb.AppendLine("");
            sb.AppendLine("[Logs & Debug]");
            sb.AppendLine("# Enables or disables activity being logged to essentials_ logs.");
            sb.AppendLine("enableConsoleLogging=true");
            sb.AppendLine("# Enables or disables activity being logged to essentialsChat_ logs.");
            sb.AppendLine("enableChatLogging=true");
            sb.AppendLine("# The maximum number of chat log. If the number of chat logs exceeds this number, the extraneous file(s) will be deleted.");
            sb.AppendLine("chatLogCap=15");
            sb.AppendLine("# The maximum number of logs. If the number of logs exceeds this number, the extraneous file(s) will be deleted.");
            sb.AppendLine("logCap=15");
            sb.AppendLine("# When the mod says something in chat, be it PM or broadcast to all, it will show in the logs.");
            sb.AppendLine("logModMessages=true");
            sb.AppendLine("# If an error occurs when something is broadcasted and catchBroadcastErrors is true, log the error.");
            sb.AppendLine("logBroadcastErrors=true");
            sb.AppendLine("# If an error occurs when something is broadcasted, handle the error.");
            sb.AppendLine("catchBroadcastErrors=true");
            sb.AppendLine("# If true, disconnection will continue even if the player's NetworkPlayer and NetUser are null.");
            sb.AppendLine("disconnectEvenIfNull=false");
            sb.AppendLine("# When a user places a sleeping bag or bed, it will be announced in console along with that bed's/sleeping bag's position.");
            sb.AppendLine("logBedPlacements=false");
            sb.AppendLine("");
            sb.AppendLine("[BigBrother]");
            sb.AppendLine("# The maximum number of storage logs. If the number of storage logs exceeds this number, the extraneous file(s) will be deleted.");
            sb.AppendLine("storageLogCap=15");
            sb.AppendLine("# When any type of storage is opened, closed, placed, or destroyed, let BigBrother handle it.");
            sb.AppendLine("enableStorageLogs=true");
            sb.AppendLine("# When items are withdrawn or deposited, let BigBrother handle it. WARNING: The current method of logging for this may cause lag.");
            sb.AppendLine("logStorageTransfer=false");
            sb.AppendLine("# The maximum number of sleeper death logs. If the number of sleeper death logs exceeds this number, the extraneous file(s) will be deleted.");
            sb.AppendLine("sleeperDeathLogsCap=15");
            sb.AppendLine("# When a sleeper dies, let BigBrother handle it.");
            sb.AppendLine("enableSleeperDeathLogs=true");
            sb.AppendLine("");
            sb.AppendLine("[Movement]");
            sb.AppendLine("# Enables or Disables teleport requesting.");
            sb.AppendLine("teleportRequest=true");
            sb.AppendLine("# Sets the delay for between the acceptance of a teleport request and the actual teleport. Default 10 seconds.");
            sb.AppendLine("requestDelay=10");
            sb.AppendLine("# Sets the delay for between the /warp and the actual warp. Default 10 seconds.");
            sb.AppendLine("warpDelay=10");
            sb.AppendLine("# Type of cooldown that will be used after a person uses a teleport request. 0 = No cooldown.");
            sb.AppendLine("# 1 = If you send a request to a player and it is accepted, you cannot tpa to him until the cooldown finishes.");
            sb.AppendLine("# 2 = If you send a request to any player and it is accepted, you cannot tpa at all until the cooldown finishes.");
            sb.AppendLine("requestCooldownType=0");
            sb.AppendLine("# Sets the cooldown (in (m)inutes or (s)econds) for teleport requests (if cooldown type is not 0). Default 15m.");
            sb.AppendLine("requestCooldown=15m");
            sb.AppendLine("# If true, players will not be able to warp or use tpa.");
            sb.AppendLine("denyRequestWarzone=true");
            sb.AppendLine("# If true, players will be able to warp and use tpa while on top of a foundation, ceiling, or within a shelter.");
            sb.AppendLine("enableInHouse=true");
            sb.AppendLine("# The default distance /wand will teleport at if not changed by the user.");
            sb.AppendLine("wandDistance=50");
            sb.AppendLine("# Sets the weapon used for the wand tool. Set it to \"any\" to allow use of any weapon.");
            sb.AppendLine("wandTool=Stone Hatchet");
            sb.AppendLine("# Sets the weapon used for the portal tool. Set it to \"any\" to allow use of any weapon.");
            sb.AppendLine("portalTool=P250");
            sb.AppendLine("# Sets the delay, in milliseconds, for the refreshing of frozen players' positions.");
            sb.AppendLine("freezeRefreshDelay=200");
            sb.AppendLine("# Sets the distance, in meters, a frozen player can move before pulling them back.");
            sb.AppendLine("freezeDistance=1");
            //sb.AppendLine("");
            //sb.AppendLine("[MySQL]");
            //sb.AppendLine("# IP for the MySQL whitelist database.");
            //sb.AppendLine("host=localhost");
            //sb.AppendLine("# Port for the MySQL whitelist database.");
            //sb.AppendLine("port=3306");
            //sb.AppendLine("# Database name for the MySQL whitelist database.");
            //sb.AppendLine("database=RustEssentials");
            //sb.AppendLine("# Username for the MySQL whitelist database.");
            //sb.AppendLine("user=root");
            //sb.AppendLine("# Password for the MySQL whitelist database.");
            //sb.AppendLine("pass=");
            sb.AppendLine("");
            sb.AppendLine("[Inheritance]");
            sb.AppendLine("# If true, users will inherit their assigned commands plus the ones useable by those of lower ranks.");
            sb.AppendLine("inheritCommands=true");
            sb.AppendLine("# If true, users will inherit their assigned kits plus the ones useable by those of lower ranks.");
            sb.AppendLine("inheritKits=true");
            sb.AppendLine("# If true, users will inherit their assigned warps plus the ones useable by those of lower ranks.");
            sb.AppendLine("inheritWarps=true");
            sb.AppendLine("");
            sb.AppendLine("[Damage]");
            sb.AppendLine("# Damage multiplier for when a user is attacked by a non-allied user outside his/her own faction. Default 1.");
            sb.AppendLine("neutralDamage=1");
            sb.AppendLine("# Damage multiplier for when a user is attacked by a user inside the same faction. Default 0.");
            sb.AppendLine("friendlyDamage=0");
            sb.AppendLine("# Damage multiplier for when a user is attacked by an allied user. Default 0.70.");
            sb.AppendLine("allyDamage=0.70");
            sb.AppendLine("# Default damage multiplier for when a user is attacked by a non-allied user outside his/her own faction while in a war zone. Default 1.");
            sb.AppendLine("warDamage=1");
            sb.AppendLine("# Default damage multiplier for when a user is attacked by a user inside the same faction while in a war zone. Default 0.");
            sb.AppendLine("warFriendlyDamage=0");
            sb.AppendLine("# Default damage multiplier for when a user is attacked by an allied user while in a war zone. Default 0.70.");
            sb.AppendLine("warAllyDamage=0.70");
            sb.AppendLine("");
            sb.AppendLine("[Item Controller]");
            //sb.AppendLine("# If false, researching with research kits will not require a workbench");
            //sb.AppendLine("researchAtBench=true");
            sb.AppendLine("# If a user shoots with infinite ammo on, their loaded ammo amount will change to this number. If -1, the ammo will change to the max amount for the current gun.");
            sb.AppendLine("infAmmoClipSize=-1");
            sb.AppendLine("# If true, research kits will not disappear upon last use.");
            sb.AppendLine("infiniteResearch=false");
            sb.AppendLine("# If true, researching will require paper.");
            sb.AppendLine("researchPaper=false");
            //sb.AppendLine("# If false, items that usually require a nearby workbench to craft will no longer need one");
            //sb.AppendLine("craftAtBench=true");
            sb.AppendLine("# If true, barricades owned by a player will disappear after they die.");
            sb.AppendLine("removeOnDeath=false");
            sb.AppendLine("# If true, barricades owned by a player will disappear after they disconnect.");
            sb.AppendLine("removeOnDisconnect=false");
            sb.AppendLine("# If true and your inventory is full, items given to you will be thrown on the ground until your inventory is no longer full.");
            sb.AppendLine("enableDropItem=true");
            sb.AppendLine("");
            sb.AppendLine("[Remover]");
            sb.AppendLine("# Enables /remover. CAUTION: Users can abuse this in a multitude of ways!");
            sb.AppendLine("enableRemover=false");
            sb.AppendLine("# If true, a player with /remover on will receive the item of the object they destroy.");
            sb.AppendLine("returnItems=true");
            sb.AppendLine("# If true, a player with /remover on can only destroy objects that are indestructible.");
            sb.AppendLine("onlyOnIndesctructibles=false");
            sb.AppendLine("# If true, /remover will work on ceilings (only if onlyOnIndestructibles is true).");
            sb.AppendLine("removerOnCeiling=false");
            sb.AppendLine("# If true, /remover will work on pillars (only if onlyOnIndestructibles is true).");
            sb.AppendLine("removerOnPillar=true");
            sb.AppendLine("# If true, /remover will work on foundations (only if onlyOnIndestructibles is true).");
            sb.AppendLine("removerOnFoundation=false");
            sb.AppendLine("# If true, ceilings can be removed even if objects are on top of them (only if onlyOnIndestructibles is true).");
            sb.AppendLine("disregardCeilingWeight=true");
            sb.AppendLine("# If true, pillars can be removed even if objects are on top of them (only if onlyOnIndestructibles is true).");
            sb.AppendLine("disregardPillarWeight=true");
            sb.AppendLine("# If true, foundations can be removed even if objects are on top of them (only if onlyOnIndestructibles is true).");
            sb.AppendLine("disregardFoundationWeight=true");
            sb.AppendLine("");
            sb.AppendLine("[Top Rust Servers]");
            sb.AppendLine("# Enables the giving of the [TRS] kit in kits.ini. Note: In order for a player that has voted to get their kit, they must type /voted.");
            sb.AppendLine("enableTRSVoting=false");
            sb.AppendLine("# API key you get from your toprustservers.com server (used for voting).");
            sb.AppendLine("TRSAPIKey=0");
            sb.AppendLine("# URL to your toprustservers voting page (displays upon /vote).");
            sb.AppendLine("TRSvoteLink=http://nothingtoseehere.donotvisit/");
            sb.AppendLine("# Sets the message that is sent to all players when a player votes for the server.");
            sb.AppendLine("TRSvotingMessage=$PLAYER$ was rewarded for voting for the server! Type /vote for more information.");
            sb.AppendLine("");
            sb.AppendLine("[Rust-Servers]");
            sb.AppendLine("# Enables the giving of the [RS] kit in kits.ini. Note: In order for a player that has voted to get their kit, they must type /voted.");
            sb.AppendLine("enableRSVoting=false");
            sb.AppendLine("# API key you get from your rust-servers.net server (used for voting).");
            sb.AppendLine("RSAPIKey=0");
            sb.AppendLine("# URL to your toprustservers voting page (displays upon /vote).");
            sb.AppendLine("RSvoteLink=http://nothingtoseehere.donotvisit/");
            sb.AppendLine("# Sets the message that is sent to all players when a player votes for the server.");
            sb.AppendLine("RSvotingMessage=$PLAYER$ was rewarded for voting for the server! Type /vote for more information.");
            sb.AppendLine("");
            sb.AppendLine("[Whois]");
            sb.AppendLine("# If true, /whois will show the user's rank.");
            sb.AppendLine("enableRank=true");
            sb.AppendLine("");
            sb.AppendLine("[Zones]");
            sb.AppendLine("# If true, buildings will not decay if they are in a zone");
            sb.AppendLine("checkIfInZone=true");
            sb.AppendLine("");
            sb.AppendLine("[Limited Sleepers]");
            sb.AppendLine("# Enables Limited Sleepers - making sleepers disappear after the configured amount of time has elapsed.");
            sb.AppendLine("enableLimitedSleepers=false");
            sb.AppendLine("# After a sleeper spawns, wait the set sleeperElapseInterval (in seconds) and then delete the sleeper.");
            sb.AppendLine("sleeperElapseInterval=30");
            sb.AppendLine("# The ranks that should not spawn a sleeper after disconnection IF enableLimitedSleepers is true. Ranks should be separated by commas.");
            sb.AppendLine("excludeFromSleepers=Owner,Administrator");
            sb.AppendLine("");
            sb.AppendLine("[Antihack]");
            sb.AppendLine("# IF YOU CHANGE THIS SETTING DURING THE LIFE OF THE SERVER, YOU MUST RESTART THE SERVER! Changing this option during the life of the server will not do anything.");
            sb.AppendLine("# If set to 0, the server will cycle through all players to do antihack checks using a single function. This may cause lag - depends on your server.");
            sb.AppendLine("# If set to 1, the server will execute checks on each person individually with checks starting on each player when they join. This is probably the better option.");
            sb.AppendLine("checkMode=1");
            sb.AppendLine("# Enables anti-speedhack - prevents hackers from moving horizontally (crouching/walking/sprinting) faster than maximumSpeed.");
            sb.AppendLine("enableAntiSpeed=true");
            sb.AppendLine("# Enables anti-jumphack - prevents hackers from moving upward (jumping) faster than maximumJumpSpeed.");
            sb.AppendLine("enableAntiJump=true");
            sb.AppendLine("# Enables anti-learnall - prevents hackers from being able to craft items without having researched them.");
            sb.AppendLine("enableAntiBP=true");
            sb.AppendLine("# Enables anti-autowood - prevents hackers from automatically gathering wood from trees around them.");
            sb.AppendLine("enableAntiAW=true");
            sb.AppendLine("# Enables anti-range - prevents hackers (or normal players that accidently hit phantom bodies) from hitting other players when out of range.");
            sb.AppendLine("enableAntiRange=true");
            sb.AppendLine("# Sets the flexibility of which enableAntiRange will take affect. If a kill is made at 126m and the max is 120m, the system will prevent the kill because the flexibility makes the max range 125m but is still over the max.");
            sb.AppendLine("rangeFlexibility=5");
            sb.AppendLine("# The number of violations a player can have before being kicked. Note: Violations increase as the player gets moved back (Default 15).");
            sb.AppendLine("violationLimit=15");
            sb.AppendLine("# Sets the maximum speed (m/ms) a player can travel without violation. Raise this to have a less strict anti-speedhack or to compensate for lag. Note: This will CANNOT account for lag (Default 0.0156).");
            sb.AppendLine("maximumSpeed=0.0156");
            sb.AppendLine("# Sets the maximum speed (m/ms) a player can travel upwards without violation. Raise this to have a less strict anti-jumphack (Default 0.0065).");
            sb.AppendLine("maximumJumpSpeed=0.0065");
            sb.AppendLine("# Sets the time (in milliseconds) to cycle through each player, if checkMode is 0, or to check each player individually, if checkMode is 1, to check their speed (Default 800).");
            sb.AppendLine("calculateInterval=800");
            sb.AppendLine("# If true, players caught going over the speed limit will be moved back.");
            sb.AppendLine("moveBackSpeed=false");
            sb.AppendLine("# If true, players caught going over the jumpspeed limit will be moved back.");
            sb.AppendLine("moveBackJump=false");
            sb.AppendLine("# Sets how many calculateIntervals need to pass in order for violation counts to decrease. Example: when calculateInterval elapses 5 times, violation count will decrease on everyone (Default 13).");
            sb.AppendLine("lowerViolationInterval=13");
            sb.AppendLine("");
            sb.AppendLine("[Resources]");
            sb.AppendLine("# Sets the multiplier for resource gathering when using a Rock.");
            sb.AppendLine("rockMultiplier=1");
            sb.AppendLine("# Sets the multiplier for resource gathering when using a Stone Hatchet.");
            sb.AppendLine("sHatchetMultiplier=1");
            sb.AppendLine("# Sets the multiplier for resource gathering when using a Hatchet.");
            sb.AppendLine("hatchetMultiplier=1");
            sb.AppendLine("# Sets the multiplier for resource gathering when using a Pick Axe.");
            sb.AppendLine("pickaxeMultiplier=1");
            //sb.AppendLine("");
            //sb.AppendLine("# Shopify implementation is not complete, do not bother using this until then");
            //sb.AppendLine("[Shopify]");
            //sb.AppendLine("# Enables or disables the Shopify Donor Shop API.");
            //sb.AppendLine("enableShopify=false");
            //sb.AppendLine("# Sets the API key for your server's Shopify.");
            //sb.AppendLine("shopifyAPIKey=");
            //sb.AppendLine("# Sets the URL for your server's Shopify donation page.");
            //sb.AppendLine("shopifyLink=http://nothingtoseehere.donotvisit/");
            sb.AppendLine("");
            sb.AppendLine("[Bouncing Betty]");
            sb.AppendLine("# If true, players can type /betty to \"craft\" and place a bouncing betty.");
            sb.AppendLine("enableBouncingBetty=true");
            sb.AppendLine("# Sets the list of items required to successfully do /betty - leave blank for no requirement.");
            sb.AppendLine("bettyRecipe=");
            sb.AppendLine("[");
            sb.AppendLine("    Gunpowder:200,");
            sb.AppendLine("    Metal Fragments:30,");
            sb.AppendLine("    Low Quality Metal:3,");
            sb.AppendLine("    Sulfur:20,");
            sb.AppendLine("    Flare:1,");
            sb.AppendLine("    Explosives:1");
            sb.AppendLine("]");
            sb.AppendLine("# Maximum amount of betties any given player can place.");
            sb.AppendLine("bettiesPerPlayer=3");
            sb.AppendLine("# Sets the delay (in seconds) until a bouncing betty is armed after it has been placed.");
            sb.AppendLine("bettyArmingDelay=5");
            sb.AppendLine("# If true, players can place bouncing betties within 'distanceFromOtherHouses' meters.");
            sb.AppendLine("bettyNearOtherHouses=false");
            sb.AppendLine("# Sets the distance (in meters) around other players' homes where players cannot place betties IF bettyNearOtherHouses is false.");
            sb.AppendLine("distanceFromOtherHouses=15");
            sb.AppendLine("# If true, the owner of a bouncing betty can trip/activate it.");
            sb.AppendLine("ownerActivateBetty=false");
            sb.AppendLine("# If true, a faction mate of the owner of a bouncing betty can trip/activate it.");
            sb.AppendLine("factionActivateBetty=false");
            sb.AppendLine("# If true, an ally of the owner of a bouncing betty can trip/activate it.");
            sb.AppendLine("allyActivateBetty=false");
            sb.AppendLine("# If true, a bouncing betty can hurt its owner.");
            sb.AppendLine("bettyHurtOwner=false");
            sb.AppendLine("# If true, a bouncing betty can hurt its owner's faction mate.");
            sb.AppendLine("bettyHurtFaction=true");
            sb.AppendLine("# If true, a bouncing betty can hurt its owner's ally.");
            sb.AppendLine("bettyHurtAlly=true");
            sb.AppendLine("# If true, a bouncing betty can be picked up by its owner.");
            sb.AppendLine("ownerPickupBetty=true");
            sb.AppendLine("# If true, a bouncing betty can be picked up by its owner's faction mate.");
            sb.AppendLine("factionPickupBetty=false");
            sb.AppendLine("# If true, a bouncing betty can be picked up by its owner's ally.");
            sb.AppendLine("allyPickupBetty=false");
            sb.AppendLine("# If true, a bouncing betty can be picked up by anyone else (neutrals).");
            sb.AppendLine("neutralPickupBetty=false");
            sb.AppendLine("# If true, picking up a bouncing betty will return the materials used to \"craft\" it.");
            sb.AppendLine("returnBettyMaterials=false");
            sb.AppendLine("# If true, items dropped from a user who dies to a bouncing betty will be deleted.");
            sb.AppendLine("bettyDeathDeleteItems=false");
            sb.AppendLine("# If a player is within this radius, the betty will activate.");
            sb.AppendLine("activateRadius=5");
            sb.AppendLine("# Players within this radius of an exploding betty will have their legs broken and minor damage.");
            sb.AppendLine("breakLegsRadius=10");
            sb.AppendLine("# Players within this radius of an exploding betty will receive a bleeding effect of 5 hp/second and minor damage.");
            sb.AppendLine("bleedingRadius=12");
            sb.AppendLine("# Players within this radius of an exploding betty will receive major damage.");
            sb.AppendLine("hurtRadius=5");
            sb.AppendLine("# Players within this radius of an exploding betty will receive this amount of damage.");
            sb.AppendLine("maxBettyPlayerDamage=600");
            sb.AppendLine("# Objects within this radius of an exploding betty will receive this amount of damage.");
            sb.AppendLine("maxBettyObjectDamage=100");
            sb.AppendLine("");
            sb.AppendLine("[Family Sharing]");
            sb.AppendLine("# If true, users with family shared accounnts cannot join the server (MUST HAVE A VALID STEAMAPIKEY).");
            sb.AppendLine("enableAntiFamilyShare=false");
            sb.AppendLine("# Sets the steam api key (Get your own here: http://steamcommunity.com/dev/apikey - You can put a random domain name if you want, it doesn't matter).");
            sb.AppendLine("steamAPIKey=0");
            sb.AppendLine("# The ranks that will not be checked for a family shared account. Ranks should be separated by commas.");
            sb.AppendLine("excludeFromFamilyCheck=Owner,Administrator");
            sb.AppendLine("");
            sb.AppendLine("[LightsOut]");
            sb.AppendLine("# If a player is not on/in a house, /lights on and /lights off will only affect lights within the defaultLightsRange radius of them.");
            sb.AppendLine("defaultLightsRange=50");
            sb.AppendLine("# If a player sets their lights range with /lights #, it can only be set this high.");
            sb.AppendLine("maxLightsRange=50");
            sb.AppendLine("# Maximum amount of lights that can be lit at once inside 1 house.");
            sb.AppendLine("maxLightsPerHouse=30");
            sb.AppendLine("# Maximum amount of lights owned by a single person that can be lit at once.");
            sb.AppendLine("maxLightsPerPerson=20");

            return sb;
        }

        public static StringBuilder pathsText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# This is the paths file. If you want to change the location of any RustEssentials folder, do so here.");
            sb.AppendLine("# In the path variables, start with \".\\\" to resemble the directory of rust_server.exe");
            sb.AppendLine("[Settings]");
            sb.AppendLine("# If true, the \"RustEssentials\" folder will be placed in the \"save\" folder.");
            sb.AppendLine("useDefaultPaths=true");
            sb.AppendLine("# Sets the directory path for log files. Leave this blank if you want it to stay inside the \"RustEssentials\" folder.");
            sb.AppendLine("logPath=");
            sb.AppendLine("# Sets the directory path for loot tables. Leave this blank if you want it to stay inside the \"RustEssentials\" folder.");
            sb.AppendLine("tablesPath=");
            sb.AppendLine("# Sets the directory path for the \"RustEssentials\" folder.");
            sb.AppendLine("configPath=");
            sb.AppendLine("# Sets the directory path for the \"BigBrother\" folder. Leave this blank if you want it to stay inside the \"RustEssentials\\Logs\" folder.");
            sb.AppendLine("bigBrotherPath=");
            sb.AppendLine("# Sets the directory path for the \"Storage Logs\" folder. Leave this blank if you want it to stay inside the \"RustEssentials\\Logs\\BigBrother\" folder.");
            sb.AppendLine("storageLogsPath=");
            sb.AppendLine("# Sets the directory path for the \"Sleeper Deaths Logs\" folder. Leave this blank if you want it to stay inside the \"RustEssentials\\Logs\\BigBrother\" folder.");
            sb.AppendLine("sleeperDeathLogsPath=");

            return sb;
        }

        public static StringBuilder decayText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# This is the decay file. Customizations for decay delays and intervals should be placed here.");
            sb.AppendLine("# Please note that the # symbol resembles a comment and should not be used when configuring.");
            sb.AppendLine("[Overall]");
            sb.AppendLine("# Enables or disables decay.");
            sb.AppendLine("enableDecay=true");
            sb.AppendLine("# Enables or disables custom decay.");
            sb.AppendLine("enableCustomDecay=false");
            sb.AppendLine("# Sets the amount of time (in seconds) that object decay should run.");
            sb.AppendLine("decayObjectInterval=300");
            sb.AppendLine("# Sets the amount of time (in seconds) that structure decay should run.");
            sb.AppendLine("decayStructureInterval=2100");
            sb.AppendLine("# Sets the amount of time (in seconds) that decay for wood structures should be delayed.");
            sb.AppendLine("decayWoodDelayInterval=172800");
            sb.AppendLine("# Sets the amount of time (in seconds) that decay for metal structures should be delayed.");
            sb.AppendLine("decayMetalDelayInterval=345600");
            sb.AppendLine("");
            sb.AppendLine("# Specify object/structure names and their custom decay intervals separated by a \":\".");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   Wood Wall:2100");
            sb.AppendLine("#   Metal Wall:2100");
            sb.AppendLine("#   Wood Storage Box:300");
            sb.AppendLine("[Individual]");
            sb.AppendLine("");

            return sb;
        }

        public static StringBuilder itemControllerText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# This is the item controller file. Restrictions for crafting, researching, and blueprints should be placed here.");
            sb.AppendLine("# Please note that the # symbol resembles a comment and should not be used when configuring.");
            sb.AppendLine("# ");
            sb.AppendLine("# Item names should be placed directly under the category you want it restricted under.");
            sb.AppendLine("# In order to restrict crafting for an item, simply place it below the [Crafting Restrictions] section.");
            sb.AppendLine("# Be aware that item names are case-sensitive and must be spelled correctly in order to properly apply the restriction.");
            sb.AppendLine("# Example of restricting an item:");
            sb.AppendLine("#   [Item Restrictions]");
            sb.AppendLine("#   Explosive Charge");
            sb.AppendLine("#   ");
            sb.AppendLine("#   [Crafting Restrictions]");
            sb.AppendLine("#   Bolt Action Rifle");
            sb.AppendLine("#   ");
            sb.AppendLine("#   [Research Restrictions]");
            sb.AppendLine("#   M4");
            sb.AppendLine("#   ");
            sb.AppendLine("#   [Blueprint Restrictions]");
            sb.AppendLine("#   Kevlar Vest");
            sb.AppendLine("");
            sb.AppendLine("[Item Restrictions]");
            sb.AppendLine("");
            sb.AppendLine("[Crafting Restrictions]");
            sb.AppendLine("");
            sb.AppendLine("[Research Restrictions]");
            sb.AppendLine("");
            sb.AppendLine("[Blueprint Restrictions]");

            return sb;
        }

        public static StringBuilder warpsText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# This is the warps file. Warp locations should be named and assigned here.");
            sb.AppendLine("# Please note that the # symbol resembles a comment and should not be used when configuring.");
            sb.AppendLine("# ");
            sb.AppendLine("# Warps are 3 point vectors (x, y, and z) with an assigned name.");
            sb.AppendLine("# Warps CANNOT have duplicate names.");
            sb.AppendLine("# By adding them here, you will be able to type /warp *name* to teleport to that vector.");
            sb.AppendLine("# Warps are permission bound and can be attached to either rank prefixes or UIDs.");
            sb.AppendLine("# Warps that are attached to a rank will be inherited by ranks of higher authority unless inheritWarps in the config is false.");
            sb.AppendLine("# Example of a warp bound to Owners:");
            sb.AppendLine("#   [Village.O]");
            sb.AppendLine("#   (4986.2, 410.6, 5001.6)");
            sb.AppendLine("# ");
            sb.AppendLine("# Example of a warp bound to default users:");
            sb.AppendLine("#   [Spawn]");
            sb.AppendLine("#   (4986.2, 410.6, 5001.6)");
            sb.AppendLine("# ");
            sb.AppendLine("# Example of a warp bound to a user:");
            sb.AppendLine("#   [Skybase.76569811000000000]");
            sb.AppendLine("#   (4986.2, 410.6, 5001.6)");
            sb.AppendLine("# ");
            sb.AppendLine("# Warps that are assigned to ranks can skip inheritance by adding '*' after the warp \"tag.\"");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [House.M]*");
            sb.AppendLine("#   (4986.2, 410.6, 5001.6)");
            sb.AppendLine("#");
            sb.AppendLine("# Warps can also be designed to have cooldowns by adding \"cooldown=<#(s/m/h)>\" after the warp name.");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Spawn] <--- This warp can be used without any cool down");
            sb.AppendLine("#   (4986.2, 410.6, 5001.6)");
            sb.AppendLine("#   [Spawn.O] <--- This warp has a 30 second cool down.");
            sb.AppendLine("#   cooldown=30s");
            sb.AppendLine("#   (4986.2, 410.6, 5001.6)");
            sb.AppendLine("#   [Spawn.M] <--- This warp has a 30 minute cool down.");
            sb.AppendLine("#   cooldown=30m");
            sb.AppendLine("#   (4986.2, 410.6, 5001.6)");
            sb.AppendLine("#   [Infinite] <--- This warp has an infinite cooldown and can only be used once.");
            sb.AppendLine("#   cooldown=-1");
            sb.AppendLine("#   (4986.2, 410.6, 5001.6)");
            sb.AppendLine("");

            return sb;
        }

        public static StringBuilder donorKitsText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# This is the donor kits file. One time donor kit IDs for Shopify should be setup here.");
            sb.AppendLine("# Please note that the # symbol resembles a comment and should not be used when configuring.");
            sb.AppendLine("# ");
            sb.AppendLine("# When assigning items to a donor kit, you should specify, first, the kit ID (same as the IDs on Shopify) in brackets.");
            sb.AppendLine("# Then under the ID, specify items and amounts like you would for normal kits (refer to kits.ini for notes).");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [1]");
            sb.AppendLine("#   P250(4):1");
            sb.AppendLine("#   Wood Planks:250");
            sb.AppendLine("");

            return sb;
        }

        public static StringBuilder prefixText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# This is the prefix file. Prefixes for specific users should go here.");
            sb.AppendLine("# Please note that the # symbol resembles a comment and should not be used when configuring.");
            sb.AppendLine("# ");
            sb.AppendLine("# Prefixes added to the file will overwrite the ones assigned by rank.");
            sb.AppendLine("# If, for example, a user is assigned the moderator rank, the prefix he is assigned here will be used instead of the moderator prefix.");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   <USER ID>:<PREFIX>");
            sb.AppendLine("#   76569811000000000:!!");
            sb.AppendLine("# ");
            sb.AppendLine("# If you want to remove a user's assigned rank prefix, simply add his UID without specifying any kind of prefix. DO NOT ADD A ':'.");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   <USER ID>");
            sb.AppendLine("#   76569811000000000");
            sb.AppendLine("");

            return sb;
        }

        public static StringBuilder defaultLoadoutText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# This is the default loadout file. Items for the default spawn loadout should go here.");
            sb.AppendLine("# Please note that the # symbol resembles a comment and should not be used when configuring.");
            sb.AppendLine("# ");
            sb.AppendLine("# When designating the loadout, you have two sections: [Hotbar] and [Inventory].");
            sb.AppendLine("# If, for example, an item is assigned to the hotbar section, the item will be spawned into the [Hotbar] IF the hotbar has space.");
            sb.AppendLine("# If the hotbar is fully occupied, no vacant/empty slots, the item will be spawned into the general inventory.");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Hotbar]");
            sb.AppendLine("#   Rock:1");
            sb.AppendLine("#   Bandage:2");
            sb.AppendLine("#   Torch:1");
            sb.AppendLine("# If an item is assigned to either [Hotbar] or [Inventory] and the item is an armor piece (Helmet, Vest, etc.),");
            sb.AppendLine("# the armor piece will be auto-equipped if that armor slot is open. If it is not open, it will be spawned into the general inventory.");
            sb.AppendLine("# If you want to remove a user's assigned rank prefix, simply add his UID without specifying any kind of prefix. DO NOT ADD A ':'.");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Inventory]");
            sb.AppendLine("#   Kevlar Pants:1 <---- This will be spawned into the pants slot");
            sb.AppendLine("#   Cloth Pants:1 <---- This will be spawned into the general inventory.");
            sb.AppendLine("# ");
            sb.AppendLine("# When adding guns to either [Hotbar] or [Inventory], you have the ability to specify the ammo in the clip, attachment slots, and attachments.");
            sb.AppendLine("# Format: <Gun>(<Slots>):<Amount>(<Ammo>):<Attachment 1>;<Attachment 2>;<etc...>");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Inventory]");
            sb.AppendLine("#   P250(1):1(8):Flashlight Mod");
            sb.AppendLine("#   P250(1):1(8):Flashlight Mod;Holo sight");
            sb.AppendLine("#   M4(4):1:Holo sight");
            sb.AppendLine("#   M4(4):1:Holo sight;Flashlight Mod");
            sb.AppendLine("#   MP5A4:1(0):Holo sight");
            sb.AppendLine("#   Shotgun(3):1(1)");
            sb.AppendLine("");
            sb.AppendLine("[Hotbar]");
            sb.AppendLine("Rock:1");
            sb.AppendLine("Bandage:2");
            sb.AppendLine("Torch:1");
            sb.AppendLine("");
            sb.AppendLine("[Inventory]");

            return sb;
        }

        public static StringBuilder kitsText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# This is the kits file. Kits that can be spawned with /kit should go here.");
            sb.AppendLine("# Please note that the # symbol resembles a comment and should not be used when configuring.");
            sb.AppendLine("# ");
            sb.AppendLine("# If inheritKits is false, kits will only be assigned to their respective rank/prefix.");
            sb.AppendLine("# ");
            sb.AppendLine("# [TRS] is the voting kit for TopRustServers.com. Note that the [TRS] kit does not accept cooldowns. Please do not delete it even if you don't have the voting system enabled.");
            sb.AppendLine("# [RS] is the voting kit for rust-servers.net. Note that the [RS] kit does not accept cooldowns. Please do not delete it even if you don't have the voting system enabled.");
            sb.AppendLine("# ");
            sb.AppendLine("# Each kit in the list can be set with [<Name>] and spawned with /kit <Name>.");
            sb.AppendLine("# Kits CANNOT have duplicate names.");
            sb.AppendLine("# Kits are not case sensitive.");
            sb.AppendLine("# Each item specified per kit should be set with name in front and amount after.");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Starter]");
            sb.AppendLine("#   Stone Hatchet:1");
            sb.AppendLine("#");
            sb.AppendLine("# Kits can also be set to work for users with direct or inherited permissions by appending \".<Rank Prefix>\" after the kit name.");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Starter] <--- This kit is usable by everyone IF inheritKits is true. If not, only defaults.");
            sb.AppendLine("#   Stone Hatchet:1");
            sb.AppendLine("#   [SomeKit.O] <--- This kit is only usable by those with the Owner rank.");
            sb.AppendLine("#   Stone Hatchet:1");
            sb.AppendLine("#   [ModKit.M] <--- This kit can be used by Moderators and those more powerful than that (AKA Admins and Owners) IF inheritKits is true.");
            sb.AppendLine("#   Stone Hatchet:1");
            sb.AppendLine("#");
            sb.AppendLine("# However, if you wanted to assign a kit for a specific user regardless of rank, just append \".<UID>\" after the kit name.");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Awesomeness.76560000000000000] <--- This kit is usable by the person with that UID.");
            sb.AppendLine("#   Stone Hatchet:1");
            sb.AppendLine("#");
            sb.AppendLine("# Kits can also be designed to have cooldowns by adding \"cooldown=<#(s/m/h)>\" after the kit name.");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Starter] <--- This kit can be used without any cool down");
            sb.AppendLine("#   Stone Hatchet:1");
            sb.AppendLine("#   [SomeKit.O] <--- This kit has a 30 second cool down.");
            sb.AppendLine("#   cooldown=30s");
            sb.AppendLine("#   Stone Hatchet:1");
            sb.AppendLine("#   [ModKit.M] <--- This kit has a 30 minute cool down.");
            sb.AppendLine("#   cooldown=30m");
            sb.AppendLine("#   Stone Hatchet:1");
            sb.AppendLine("#   [Infinite] <--- This kit has an infinite cooldown and can only be used once.");
            sb.AppendLine("#   cooldown=-1");
            sb.AppendLine("#   Stone Hatchet:1");
            sb.AppendLine("# ");
            sb.AppendLine("# Kits that are assigned to ranks can skip inheritance by adding '*' after the kit \"tag.\"");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Magic.M]*");
            sb.AppendLine("#   Stone Hatchet:1");
            sb.AppendLine("# ");
            sb.AppendLine("# When adding guns to a kit, you have the ability to specify the ammo in the clip, attachment slots, and attachments.");
            sb.AppendLine("# Format: <Gun>(<Slots>):<Amount>(<Ammo>):<Attachment 1>;<Attachment 2>;<etc...>");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Guns]");
            sb.AppendLine("#   P250(1):1(8):Flashlight Mod");
            sb.AppendLine("#   P250(1):1(8):Flashlight Mod;Holo sight");
            sb.AppendLine("#   M4(4):1:Holo sight");
            sb.AppendLine("#   M4(4):1:Holo sight;Flashlight Mod");
            sb.AppendLine("#   MP5A4:1(0):Holo sight");
            sb.AppendLine("#   Shotgun(3):1(1)");
            sb.AppendLine("");
            sb.AppendLine("[Starter]");
            sb.AppendLine("cooldown=30s");
            sb.AppendLine("Stone Hatchet:1");
            sb.AppendLine("Cloth Vest:1");
            sb.AppendLine("Cloth Pants:1");
            sb.AppendLine("");
            sb.AppendLine("[Invis.O]");
            sb.AppendLine("Invisible Boots:1");
            sb.AppendLine("Invisible Pants:1");
            sb.AppendLine("Invisible Vest:1");
            sb.AppendLine("Invisible Helmet:1");
            sb.AppendLine("");
            sb.AppendLine("[TRS]");
            sb.AppendLine("Wood Planks:100");
            sb.AppendLine("");
            sb.AppendLine("[RS]");
            sb.AppendLine("Wood Planks:100");

            return sb;
        }

        public static StringBuilder ranksText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# This is the ranks file. Rank assignments along with custom ranks should go here.");
            sb.AppendLine("# Please note that the # symbol resembles a comment and should not be used when configuring.");
            sb.AppendLine("#");
            sb.AppendLine("# The list is read in order of authority. The means the top most rank has the highest power, authority, and priority and vice versa for the bottom most rank.");
            sb.AppendLine("# EX: [Owner] has an access level/authority of 5 (highest) and [Default] of 1 (highest).");
            sb.AppendLine("#");
            sb.AppendLine("# Users are assigned ranks per their Steam User ID (SUID/UID). Using # <Name> is simply a way of easily identifying for future reading and is not required.");
            sb.AppendLine("# Users can grab their UID in game by typing \"/uid\".");
            sb.AppendLine("# Example format:");
            sb.AppendLine("# [Owner.O]");
            sb.AppendLine("# 76560000000000000 # Some Guy");
            sb.AppendLine("#");
            sb.AppendLine("# Appending .<string> will assign a rank prefix to that rank. Prefix recommended to be only 1 or 2 characters.");
            sb.AppendLine("# [Owner.O] or [Member.:D]");
            sb.AppendLine("# will make format user names in chat into:");
            sb.AppendLine("# [O] OwnerGuy: Hello");
            sb.AppendLine("# [:D] MemberGuy: What up");
            sb.AppendLine("");
            sb.AppendLine("[Owner.O]");
            sb.AppendLine("");
            sb.AppendLine("[Administrator.A]");
            sb.AppendLine("");
            sb.AppendLine("[Moderator.M]");
            sb.AppendLine("");
            sb.AppendLine("# Users under the [Member] rank will be ignored - always.");
            sb.AppendLine("# To enable the [Member] rank, set \"whitelist\" to false and \"useAsMembers\" to true in the config.ini.");
            sb.AppendLine("# User IDs found in the whitelist.txt will then be read as [Member]'s.");
            sb.AppendLine("# Note: You cannot change the rank name [Member]. If [Member] does not exist, \"useAsMembers\" will not work.");
            sb.AppendLine("[Member.m] # DO NOT ASSIGN PLAYERS TO THIS RANK, READ ABOVE");
            sb.AppendLine("");
            sb.AppendLine("# This is the rank with the lowest authority.");
            sb.AppendLine("# isDefaultRank sets the preceding rank, in this case [Default], as the default rank for new users.");
            sb.AppendLine("# The rank set as isDefaultRank will not accept UID specification.");
            sb.AppendLine("[Default] # DO NOT ASSIGN PLAYERS TO THIS RANK");
            sb.AppendLine("isDefaultRank");
            sb.AppendLine("");

            return sb;
        }

        public static StringBuilder motdText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# This is the MOTD file. Messages displayed upon join or cycle should go here.");
            sb.AppendLine("# Please note that the # symbol resembles a comment and should not be used when configuring.");
            sb.AppendLine("# ");
            sb.AppendLine("# [Join] is the MOTD that is broadcasted directly to the user that joins upon connecting.");
            sb.AppendLine("# [Cycle.#(s/m/h)] is the MOTD that is broadcasted to all users every time the # elapses.");
            sb.AppendLine("# [Once.#(s/m/h)] is the MOTD that is broadcasted to all users once after the # elapses.");
            sb.AppendLine("# [List.#(s/m/h)] is the MOTD that is broadcasted to all users one line at a time ever time the # elapses.");
            sb.AppendLine("# [Rules] is the MOTD that is broadcasted directly to the user that types /rules");
            sb.AppendLine("#");
            sb.AppendLine("# The #(s/m/h) in [Cycle.#(s/m/h)] resembles the interval in (s)econds, (m)inutes, or (h)ours.");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Cycle.2h]");
            sb.AppendLine("#   This is the MOTD.");
            sb.AppendLine("# This MOTD will be broadcasted every 2 hours to all users.");
            sb.AppendLine("#");
            sb.AppendLine("# Remember that you can add and remove as many lines as you want for the two MOTDs.");
            sb.AppendLine("# All MOTD's can run commands with {/command name}.");
            sb.AppendLine("# Example:");
            sb.AppendLine("#   [Once.10m]");
            sb.AppendLine("#   {/save}");
            sb.AppendLine("");
            sb.AppendLine("[Join]");
            sb.AppendLine("JoinMessage1");
            sb.AppendLine("JoinMessage2");
            sb.AppendLine("JoinMessage3");
            sb.AppendLine("");
            sb.AppendLine("[Cycle.15m]");
            sb.AppendLine("CycleMessage1");
            sb.AppendLine("CycleMessage2");
            sb.AppendLine("CycleMessage3");
            sb.AppendLine("");
            sb.AppendLine("[List.20m]");
            sb.AppendLine("ListMessage1");
            sb.AppendLine("ListMessage2");
            sb.AppendLine("ListMessage3");
            sb.AppendLine("");
            sb.AppendLine("[Once.1h]");
            sb.AppendLine("OnceMessage1");
            sb.AppendLine("OnceMessage2");
            sb.AppendLine("OnceMessage3");
            sb.AppendLine("");
            sb.AppendLine("[Rules]");
            sb.AppendLine("RuleMessage1");
            sb.AppendLine("RuleMessage2");
            sb.AppendLine("RuleMessage3");

            return sb;
        }

        public static StringBuilder commandsText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# This is the commands file. Permissions for commands should go here.");
            sb.AppendLine("# Please note that the # symbol resembles a comment and should not be used when configuring.");
            sb.AppendLine("#");
            sb.AppendLine("# The list is read in order of authority unless inheritCommands is false. This means that the ranks with the most power should be at the top and least at the bottom.");
            sb.AppendLine("# Ex: [Owner] at the top and [Default] at the bottom.");
            sb.AppendLine("#");
            sb.AppendLine("# Ranks will inherit the authority/permissions of the ranks below them.");
            sb.AppendLine("# Ex: [Owner] has permission to use the commands of [Administrator] even though it is only defined for [Administrator].");
            sb.AppendLine("#");
            sb.AppendLine("# Example format:");
            sb.AppendLine("#   [Rank name]");
            sb.AppendLine("#   /kick");
            sb.AppendLine("#   /ban");
            sb.AppendLine("#   /online");
            sb.AppendLine("#");
            sb.AppendLine("#   [Rank name 2]");
            sb.AppendLine("#   /help");
            sb.AppendLine("");
            sb.AppendLine("[Owner]");
            sb.AppendLine("/i");
            sb.AppendLine("/give");
            sb.AppendLine("/giveall");
            sb.AppendLine("/reload");
            sb.AppendLine("/daylength");
            sb.AppendLine("/nightlength");
            sb.AppendLine("/kill");
            sb.AppendLine("/stop");
            sb.AppendLine("/access");
            sb.AppendLine("/baccess");
            sb.AppendLine("/remove");
            sb.AppendLine("/removeall");
            sb.AppendLine("/craft");
            sb.AppendLine("/wand");
            sb.AppendLine("/portal");
            sb.AppendLine("/uammo");
            sb.AppendLine("/iammo");
            sb.AppendLine("/spawn");
            sb.AppendLine("/spawnlist");
            sb.AppendLine("/bypass");
            sb.AppendLine("/ebullet");
            sb.AppendLine("");
            sb.AppendLine("[Administrator]");
            sb.AppendLine("/airdrop");
            sb.AppendLine("/random");
            sb.AppendLine("/ban");
            sb.AppendLine("/bane");
            sb.AppendLine("/unban");
            sb.AppendLine("/kickall");
            sb.AppendLine("/pos");
            sb.AppendLine("/apos");
            sb.AppendLine("/say");
            sb.AppendLine("/saypop");
            sb.AppendLine("/time");
            sb.AppendLine("/tp");
            sb.AppendLine("/tpabove");
            sb.AppendLine("/tphere");
            sb.AppendLine("/god");
            sb.AppendLine("/ungod");
            sb.AppendLine("/whitelist");
            sb.AppendLine("/tppos");
            sb.AppendLine("/heal");
            sb.AppendLine("/fall");
            sb.AppendLine("/feed");
            sb.AppendLine("/f safezone");
            sb.AppendLine("/f warzone");
            sb.AppendLine("/f build");
            sb.AppendLine("/f buildable");
            sb.AppendLine("/vanish");
            sb.AppendLine("/clearinv");
            sb.AppendLine("/invsee");
            sb.AppendLine("/ewarp");
            sb.AppendLine("/rfreeze");
            sb.AppendLine("/freeze");
            sb.AppendLine("/unfreeze");
            sb.AppendLine("/unfreezeall");
            sb.AppendLine("/opos");
            sb.AppendLine("/ghost");
            sb.AppendLine("");
            sb.AppendLine("[Moderator]");
            sb.AppendLine("/kick");
            sb.AppendLine("/kicke");
            sb.AppendLine("/join");
            sb.AppendLine("/leave");
            sb.AppendLine("/mute");
            sb.AppendLine("/unmute");
            sb.AppendLine("/save");
            sb.AppendLine("/hide");
            sb.AppendLine("/owner");
            sb.AppendLine("/frozen");
            sb.AppendLine("/awhois");
            sb.AppendLine("/radius");
            sb.AppendLine("/check");
            sb.AppendLine("/notify");
            sb.AppendLine("");
            sb.AppendLine("[Member]");
            sb.AppendLine("");
            sb.AppendLine("[Default]");
            sb.AppendLine("/uid");
            sb.AppendLine("/kit");
            sb.AppendLine("/kits");
            sb.AppendLine("/help");
            sb.AppendLine("/pm");
            sb.AppendLine("/f");
            sb.AppendLine("/r");
            sb.AppendLine("/online");
            sb.AppendLine("/players");
            sb.AppendLine("/chan");
            sb.AppendLine("/history");
            sb.AppendLine("/tpa");
            sb.AppendLine("/tpaccept");
            sb.AppendLine("/tpdeny");
            sb.AppendLine("/share");
            sb.AppendLine("/unshare");
            sb.AppendLine("/unshareall");
            sb.AppendLine("/rules");
            sb.AppendLine("/version");
            sb.AppendLine("/whitelist check");
            sb.AppendLine("/warps");
            sb.AppendLine("/warp");
            sb.AppendLine("/vote");
            sb.AppendLine("/voted");
            sb.AppendLine("/fps");
            sb.AppendLine("/quality");
            sb.AppendLine("/ping");
            sb.AppendLine("/info");
            sb.AppendLine("/whois");
            sb.AppendLine("/leaderboard");
            sb.AppendLine("/drop");
            sb.AppendLine("/remover");
            sb.AppendLine("/clock");
            sb.AppendLine("/compass");
            sb.AppendLine("/sharerem");
            sb.AppendLine("/unsharerem");
            sb.AppendLine("/unshareremall");
            sb.AppendLine("/lights");
            sb.AppendLine("/betty");

            return sb;
        }

        public static StringBuilder allCommandsText()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("# Braces ({}) symbolize input that should be typed literally.");
            sb.AppendLine("# Example (/time {day}):");
            sb.AppendLine("# /time day");
            sb.AppendLine("#");
            sb.AppendLine("# Asterisks (**) symbolize input that should NOT be surrounded by quotes and can be MORE than one word.");
            sb.AppendLine("# Example (/pm <player name> [message] should be typed as):");
            sb.AppendLine("# /pm \"Some Dude\" Hey, Some Dude!");
            sb.AppendLine("#");
            sb.AppendLine("# Brackets ([]) symbolize input that should NOT be surrounded by quotes and can only be one word.");
            sb.AppendLine("# Example (/kit [kit name] should be typed as):");
            sb.AppendLine("# /kit Starter");
            sb.AppendLine("#");
            sb.AppendLine("# Arrows (<>) symbolize input that DOES require quotes if it is more than one word. No quotes needed if input is only one word.");
            sb.AppendLine("# Example (/kick <name> [reason] should be typed as):");
            sb.AppendLine("# /kick \"Some Guy\" Being some guy.");
            sb.AppendLine("# or");
            sb.AppendLine("# /kick SomeGuy Kick.");
            sb.AppendLine("#");
            sb.AppendLine("# Quotes (\"\") symbolize input that DOES require quotes.");
            sb.AppendLine("# Example (/heal \"name\" should be typed as):");
            sb.AppendLine("# /heal \"Brian\"");
            sb.AppendLine("#");
            sb.AppendLine("# Player names and item names are case sensitive. However, player names can be accepted as partials.");
            sb.AppendLine("");
            sb.AppendLine("/access {off} (Revokes access to all doors from the sender)");
            sb.AppendLine("/access {on} (Gives the sender access to all doors)");
            sb.AppendLine("/airdrop (Spawns an airdrop with a random drop location)");
            sb.AppendLine("/airdrop <player name> (Spawns an airdrop with a drop location at the specified player)");
            sb.AppendLine("/apos *player name* (Returns the specified player's position)");
            sb.AppendLine("/awhois *player name* (Displays all connection, user, and leaderboard information of the specified user)");
            sb.AppendLine("/baccess {off} (Revokes access to pick up any bouncing betty)");
            sb.AppendLine("/baccess {on} (Gives access to pick up any bouncing betty)");
            sb.AppendLine("/ban <player name> (Bans player with reason: \"Banned by a(n) <Your Rank>\")");
            sb.AppendLine("/ban <player name> *reason* (Bans player with the specified reason)");
            sb.AppendLine("/ban [player UID] (Bans player by UID with reason: \"Banned by a(n) <Your Rank>\")");
            sb.AppendLine("/ban [player UID] *reason* (Bans player by UID with the specified reason)");
            sb.AppendLine("/bane \"player name\" (Bans player by their exact name with reason: \"Banned by a(n) <Your Rank>\")");
            sb.AppendLine("/bane \"player name\" *reason* (Bans player by their exact name with the specified reason)");
            sb.AppendLine("/betty (Places a bouncing betty at your feet if you have the right materials - configurable in config)");
            sb.AppendLine("/bypass {off} (Re-enables the anti-speedhack and anti-jumphack for the sender)");
            sb.AppendLine("/bypass {on} (Bypasses the anti-speedhack and anti-jumphack for the sender)");
            sb.AppendLine("/chan {g} (Joins the global chat)");
            sb.AppendLine("/chan {global} (Joins the global chat)");
            sb.AppendLine("/chan {d} (Joins the direct chat)");
            sb.AppendLine("/chan {direct} (Joins the direct chat)");
            sb.AppendLine("/chan {f} (Joins your faction's chat if you are in a faction)");
            sb.AppendLine("/chan {faction} (Joins your faction's chat if you are in a faction)");
            sb.AppendLine("/check (Displays the status of all tools of yourself)");
            sb.AppendLine("/check *name* (Displays the status of all tools of the specified player)");
            sb.AppendLine("/clearinv *name* (Clears the inventory of the specified player)");
            sb.AppendLine("/clearinv \"name\" (Clears the inventory of the specified player by their exact name)");
            sb.AppendLine("/clock (Displays the current time in game)");
            sb.AppendLine("/compass (Displays the direction you are facing)");
            sb.AppendLine("/craft {off} (Turns off super craft mode. Crafting, research, and blueprint restrictions re-activate for the sender)");
            sb.AppendLine("/craft {on} (Turns on super craft mode. Crafting, research, and blueprint restrictions nullify for the sender)");
            sb.AppendLine("/daylength (Returns the amount of minutes in a full day)");
            sb.AppendLine("/daylength [#] (Sets the amount of minutes in a full day. Default 45.)");
            sb.AppendLine("/drop (Displays the time until the next automated airdrop)");
            sb.AppendLine("/ebullet {off} (Turns off explosive bullets)");
            sb.AppendLine("/ebullet {on} (Turns on explosive bullets)");
            sb.AppendLine("/ewarp add *name* (Adds a new warp with the specified name at your current position)");
            sb.AppendLine("/ewarp rank \"warp name\" *rank prefix* (Changes the owner of the specified warp to the rank prefix)");
            sb.AppendLine("/ewarp rem *name* (Removes the specified warp)");
            sb.AppendLine("/ewarp uid \"warp name\" [UID] (Changes the owner of the specified warp to the UID)");
            sb.AppendLine("/f {admin} *player name* (Gives faction admin to the specified faction member)");
            sb.AppendLine("/f {ally} *faction name* (Allies the specified faction)");
            sb.AppendLine("/f {build} {off} (Revokes build mode from the sender)");
            sb.AppendLine("/f {build} {on} (Grants the sender build mode and allows them to build in zones)");
            sb.AppendLine("/f {buildable} {off} (Sets the current zone as unbuildable. Players can no longer build in this zone)");
            sb.AppendLine("/f {buildable} {on} (Sets the current zone as buildable. Players can now build in this zone)");
            sb.AppendLine("/f {create} *name* (Creates and joins a faction with specified name)");
            sb.AppendLine("/f {deadmin} *player name* (Revokes faction admin from the specified faction member)");
            sb.AppendLine("/f {disband} (Disbands the current faction if user is the owner of said faction)");
            sb.AppendLine("/f {info} (Shows the sender's faction information)");
            sb.AppendLine("/f {info} *faction name* (Shows the faction information of a user or a faction)");
            sb.AppendLine("/f {invite} *name* (Invites the player with the specified name to your faction)");
            sb.AppendLine("/f {join} (Joins the faction of the last invitation received)");
            sb.AppendLine("/f {join} *name* (Joins the specified faction if invited)");
            sb.AppendLine("/f {kick} *name* (Kicks user with said name from faction)");
            sb.AppendLine("/f {leave} (Leaves current faction)");
            sb.AppendLine("/f {list} (Lists all factions on page 1)");
            sb.AppendLine("/f {list} [#] (Lists all factions on page #)");
            sb.AppendLine("/f {online} (Displays the statistics of members of the current faction)");
            sb.AppendLine("/f {players} (Lists the players of the current faction)");
            sb.AppendLine("/f {ownership} *player name* (Transfers ownership of faction to specified faction member)");
            sb.AppendLine("/f {safezone} {1} (Sets the first safezone point)");
            sb.AppendLine("/f {safezone} {2} (Sets the second safezone point)");
            sb.AppendLine("/f {safezone} {3} (Sets the third safezone point)");
            sb.AppendLine("/f {safezone} {4} (Sets the fourth safezone point)");
            sb.AppendLine("/f {safezone} {set} (Establishes the safezone)");
            sb.AppendLine("/f {safezone} {clear} (Deletes the current safezone)");
            sb.AppendLine("/f {safezone} {clearall} (Deletes all safezones)");
            sb.AppendLine("/f {unally} *faction name* (Unallies the specified allied faction)");
            sb.AppendLine("/f {warzone} {1} (Sets the first warzone point)");
            sb.AppendLine("/f {warzone} {2} (Sets the second warzone point)");
            sb.AppendLine("/f {warzone} {3} (Sets the third warzone point)");
            sb.AppendLine("/f {warzone} {4} (Sets the fourth warzone point)");
            sb.AppendLine("/f {warzone} {set} (Establishes the warzone)");
            sb.AppendLine("/f {warzone} {clear} (Deletes the current warzone)");
            sb.AppendLine("/f {warzone} {clearall} (Deletes all warzones)");
            sb.AppendLine("/fall {off} (Turns off server-wide fall damage)");
            sb.AppendLine("/fall {on} (Turns on server-wide fall damage)");
            sb.AppendLine("/feed (Feeds the sender)");
            sb.AppendLine("/feed *player name* (Feeds the designated player)");
            sb.AppendLine("/feed \"player name\" (Feeds the designated player by the exact name)");
            sb.AppendLine("/followghost {off} (If /ghost and /vanish are on, your body will follow your ghost (100m above it). Doing this will allow you to keep rendering new objects in the world)");
            sb.AppendLine("/followghost {on} (Stops your body from following your ghost)");
            sb.AppendLine("/fps (Amplifies your FPS by altering your graphic settings)");
            sb.AppendLine("/freeze *player name* (Freezes the specified player in their current possion. Note: They will have god mode and cannot hurt others once frozen)");
            sb.AppendLine("/frozen (Displays the names of all frozen players)");
            sb.AppendLine("/ghost {off} (Turns you into a ghost. Moving only affects your camera view - not your body)");
            sb.AppendLine("/ghost {on} (Turns you back into a human and teleports you back to your body)");
            sb.AppendLine("/give <player name> <item name> (Gives the item to that player)");
            sb.AppendLine("/give <player name> <item name> [amount] (Gives the amount of the item to that player)");
            sb.AppendLine("/give <player name> [item id] (Gives 1 of the item with the corresponding id to that player)");
            sb.AppendLine("/give <player name> [item id] [amount] (Gives the amount of the item with the corresponding id to that player)");
            sb.AppendLine("/giveall <item name> (Gives the item to all players)");
            sb.AppendLine("/giveall <item name> [amount] (Gives the item to all players)");
            sb.AppendLine("/giveall [item id] (Gives the item to all players)");
            sb.AppendLine("/giveall [item id] [amount] (Gives the item to all players)");
            sb.AppendLine("/god (Gives god mode to the sender)");
            sb.AppendLine("/god *player name* (Gives the specified player god mode)");
            sb.AppendLine("/god \"player name\" (Gives the specified player with the exact name god mode)");
            sb.AppendLine("/heal (Heals the sender)");
            sb.AppendLine("/heal *player name* (Heals the designated player)");
            sb.AppendLine("/heal \"player name\" (Heals the designated player by the exact name)");
            sb.AppendLine("/help (Returns available commands for your current rank)");
            sb.AppendLine("/help [command without /] (Returns the documentation and syntax for the specified command)");
            sb.AppendLine("/hide {off} (Reveals the sender to AI)");
            sb.AppendLine("/hide {on} (Hides the sender from AI)");
            sb.AppendLine("/history {1-50} (Returns the the last # lines of global chat history)");
            sb.AppendLine("/history {g} {1-50} (Returns the the last # lines of global chat history)");
            sb.AppendLine("/history {f} {1-50} (Returns the the last # lines of your faction chat history)");
            sb.AppendLine("/i <item name> (Gives the item to you)");
            sb.AppendLine("/i <item name> [amount] (Gives the amount of the item to you)");
            sb.AppendLine("/i [item id] (Gives 1 of the item with the corresponding id to you)");
            sb.AppendLine("/i [item id] [amount] (Gives the amount of the item with the corresponding id to you)");
            sb.AppendLine("/iammo {off} (Turns infinite ammo off)");
            sb.AppendLine("/iammo {on} (Turns infinite ammo on. Note: You must load atleast one of the ammo type you want to be infinite)");
            sb.AppendLine("/info (Displays the server's name and ip)");
            sb.AppendLine("/invsee (Gives back your original inventory if you have previously /invsee'd)");
            sb.AppendLine("/invsee *player name* (Mirrors the inventory of the specified player)");
            sb.AppendLine("/join (Send a fake join message of yourself)");
            sb.AppendLine("/join <player name> (Send a fake join message of a player name)");
            sb.AppendLine("/kick <player name> (Kick player with reason: \"Kicked by a(n) <Your Rank>\")");
            sb.AppendLine("/kick <player name> *reason* (Kick player with the specified reason)");
            sb.AppendLine("/kicke \"player name\" (Kick player by their exact name with reason: \"Kicked by a(n) <Your Rank>\")");
            sb.AppendLine("/kicke \"player name\" *reason* (Kick player by their exact name with the specified reason)");
            sb.AppendLine("/kickall (Kicks all users, except for the command executor, out of the server)");
            sb.AppendLine("/kill *player name* (Kills the specified player)");
            sb.AppendLine("/kill \"player name\" (Kills the specified player with that exact name)");
            sb.AppendLine("/kit [kit name] (Gives the user the specified kit if the user has the correct authority level)");
            sb.AppendLine("/kits (Lists the kits available to you)");
            sb.AppendLine("/leaderboard {deaths} (Displays the leaderboard for deaths. Note: It might not work fully if steamcommunity.com goes down)");
            sb.AppendLine("/leaderboard {kdr} (Displays the leaderboard for kdr. Note: It might not work fully if steamcommunity.com goes down)");
            sb.AppendLine("/leaderboard {kills} (Displays the leaderboard for kills. Note: It might not work fully if steamcommunity.com goes down)");
            sb.AppendLine("/leave (Sends a fake leave message of yourself)");
            sb.AppendLine("/leave *player name* (Sends a fake leave message of a player name)");
            sb.AppendLine("/lights {alloff} (Turns off every light that you own either within a radius of you or within the same building as you. Lights will only turn off if you own them)");
            sb.AppendLine("/lights {off} (Turns off all lights either within a radius of you or within the same building as you. Lights will only turn off if you own them)");
            sb.AppendLine("/lights {on} (Turns on a configurable amount of lights (furnaces/camp fires) either within a radius of you or within the same building as you. Lights will only turn on if you own them. Lights do not cook/smelt without fuel)");
            sb.AppendLine("/lights {serveroff} (Turns off every light on the server)");
            sb.AppendLine("/lights [radius] (Sets the radius of which your lights should be turned on or off)");
            sb.AppendLine("/mute *player name* (Mutes the player on global chat)");
            sb.AppendLine("/mute *player name* <time[s/m/h]> (Mutes the player on global chat for a period of time (time example: 15s or 30m))");
            sb.AppendLine("/nightlength (Returns the amount of minutes in a full night)");
            sb.AppendLine("/nightlength [#] (Sets the amount of minutes in a full night. Default 15.)");
            sb.AppendLine("/notify {off} (Stops the antihack from sending speedhack/jumphack messages to you)");
            sb.AppendLine("/notify {on} (Makes the antihack send speedhack/jumphack messages to you)");
            sb.AppendLine("/online (Returns the amount of players currently connected)");
            sb.AppendLine("/opos {off} (Turns off the ability to see the position of any object you hit)");
            sb.AppendLine("/opos {on} (Turns on the ability to see the position of any object you hit)");
            sb.AppendLine("/owner {off} (Revokes access to display the owner of a structure upon hit)");
            sb.AppendLine("/owner {on} (Gives access to display the owner of a structure upon hit)");
            sb.AppendLine("/ping (Displays your current ping to the server)");
            sb.AppendLine("/players (Lists the names of all connected players)");
            sb.AppendLine("/pm <player name> *message* (Sends a private message to that player)");
            sb.AppendLine("/portal {off} (Turns off the portal tool)");
            sb.AppendLine("/portal {on} (Turns on the portal tool. Using the portalTool will teleport you to that point on the terrain)");
            sb.AppendLine("/pos (Returns your position)");
            sb.AppendLine("/quality (Amplifies your graphical quality by altering your graphic settings)");
            sb.AppendLine("/r (Replies to the last sent or received PM)");
            sb.AppendLine("/radius [radius] (Displays the names of all users within the specified radius)");
            sb.AppendLine("/random <item name> (Gives 1 of the specified item to 1 random player)");
            sb.AppendLine("/random <item name> [amount] (Gives an amount of the specified item to 1 random player)");
            sb.AppendLine("/random <item name> [amount] [amount of winners] (Gives an amount of the specified item to random players)");
            sb.AppendLine("/random [item id] (Gives 1 of the specified item to 1 random player)");
            sb.AppendLine("/random [item id] [amount] (Gives an amount of the specified item to 1 random player)");
            sb.AppendLine("/random [item id] [amount] [amount of winners] (Gives an amount of the specified item to random players)");
            sb.AppendLine("/reload {config/whitelist/ranks/commands/kits/motd/bans/prefix/warps/controller/tables/loadout/all} (Reloads the specified file)");
            sb.AppendLine("/remove {off} (Revokes access to delete entities (structures and AI entities) upon hit)");
            sb.AppendLine("/remove {on} (Gives access to delete entities (structures and AI entities) upon hit)");
            sb.AppendLine("/remover {off} (Revokes the ability to damage and destroy structures)");
            sb.AppendLine("/remover {on} (Gives users the ability to damage and eventually destroy their own indestructible structures like foundations, ceilings, and pillars)");
            sb.AppendLine("/removeall {off} (Revokes access to delete entities (structures and AI entities) upon hit. If the entity is a structure, it will destroy all conntected structures too)");
            sb.AppendLine("/removeall {on} (Gives access to delete entities (structures and AI entities) upon hit. If the entity is a structure, it will destroy all conntected structures too)");
            sb.AppendLine("/rfreeze [radius] (Freezes all players within the specified radius)");
            sb.AppendLine("/rules (Lists the server rules)");
            sb.AppendLine("/save (Saves all world data)");
            sb.AppendLine("/say *message* (Says a message through the plugin)");
            sb.AppendLine("/saypop *message* (Says a (!) dropdown message to all clients if the first word is more than 2 characters)");
            sb.AppendLine("/saypop [icon] *message* (Says a dropdown message to all clients with designated icon)");
            sb.AppendLine("/saypop [icon] *message* [#s] (Says a dropdown message to all clients with designated icon with a duration of # seconds (1-7 range))");
            sb.AppendLine("/share *player name* (Shares ownership of your doors with the designated user)");
            sb.AppendLine("/sharerem *player name* (Shares your /remover with the designated user, allowing them to use /remover on your objects)");
            sb.AppendLine("/spawn [entity name] (Spawns 1 of the specified entity)");
            sb.AppendLine("/spawn [entity name] [amount] (Spawns said number of instances of the specified entity)");
            sb.AppendLine("/spawnlist (Displays all spawnable entities for /spawn)");
            sb.AppendLine("/stop (Saves, deactivates, and effectively stops the server)");
            sb.AppendLine("/time (Returns current time of day)");
            sb.AppendLine("/time {0-24} (Sets time to a number between 0 and 24)");
            sb.AppendLine("/time {day} (Sets time to day)");
            sb.AppendLine("/time {freeze} (Freezes time)");
            sb.AppendLine("/time {night} (Sets time to night)");
            sb.AppendLine("/time {unfreeze} (Unfreezes time)");
            sb.AppendLine("/tp <player name> (Teleports you to the designated user)");
            sb.AppendLine("/tp <player name 1> <player name 2> (Teleports player 1 to player 2)");
            sb.AppendLine("/tpa *player name* (Sends a teleport request to that user)");
            sb.AppendLine("/tpabove <player name> (Teleports you 100 meters above the designated user)");
            sb.AppendLine("/tpabove <player name 1> <player name 2> (Teleports player 1 100 meters above player 2)");
            sb.AppendLine("/tpaccept (Accepts the last teleport request recieved)");
            sb.AppendLine("/tpaccept *player name* (Accepts the teleport request from that user)");
            sb.AppendLine("/tpdeny *player name* (Denies the teleport request from that user)");
            sb.AppendLine("/tpdeny {all} (Denies all current teleport requests)");
            sb.AppendLine("/tpg <player name> (Teleports your ghost to the designated player)");
            sb.AppendLine("/tpg <player name 1> <player name 2> (Teleports player 1's ghost (if ghosted) to player 2's ghost (if ghosted))");
            sb.AppendLine("/tphere *player name (Teleports the specified player to you)");
            sb.AppendLine("/tppos [x] [y] [z] (Teleports your character to the designated vector)");
            sb.AppendLine("/uammo {off} (Turns unlimited ammo off)");
            sb.AppendLine("/uammo {on} (Turns unlimited ammo on. Note: You must carry atleast one of the ammo type you want to be unlimited)");
            sb.AppendLine("/uid (Returns your steam UID)");
            sb.AppendLine("/uid *player name* (Returns that user's steam UID)");
            sb.AppendLine("/uid \"player name\" (Returns the steam UID of the user with that exact name)");
            sb.AppendLine("/unban *player name* (Unbans the specified player)");
            sb.AppendLine("/unfreeze *player name* (Unfreezes the specified player)");
            sb.AppendLine("/unfreezeall (Unfreezes all frozen players)");
            sb.AppendLine("/ungod (Revokes god mode from the sender)");
            sb.AppendLine("/ungod *player name* (Revokes god mode from the specified player)");
            sb.AppendLine("/ungod \"player name\" (Revokes god mode from the specified player with that exact name)");
            sb.AppendLine("/unmute *player name* (Unmutes the player on global chat)");
            sb.AppendLine("/unshare *player name* (Revokes ownership of your doors from the designated user)");
            sb.AppendLine("/unshareall (Revokes ownership of your doors from everyone)");
            sb.AppendLine("/unsharerem *player name* (Revokes your /remover from the designated user, disallowing them from using /remover on your objects)");
            sb.AppendLine("/unshareremall (Revokes your /remover from everyone, disallowing anyone but you from using /remover on your objects)");
            sb.AppendLine("/vanish {off} (Makes the sender appear. If the sender reconnects, the name becomes visible)");
            sb.AppendLine("/vanish {on} (Makes the sender vanish. If the sender reconnects, the name becomes invisible)");
            sb.AppendLine("/version (Returns the current running version of Rust Essentials)");
            sb.AppendLine("/vote (Displays the voteLink from the config)");
            sb.AppendLine("/voted (Redeems the reward for voting)");
            sb.AppendLine("/wand [distance] (Sets the wand distance in meters. Default is 50)");
            sb.AppendLine("/wand {off} (Turns off the wand tool)");
            sb.AppendLine("/wand {on} (Turns on the wand tool. Using the wandTool will warp you the set distance in that direction)");
            sb.AppendLine("/warp *warp name* (Teleports you to the specified warp)");
            sb.AppendLine("/warps (Lists the warps available to you)");
            sb.AppendLine("/whitelist {add} [UID] (Adds the specified Steam UID to the whitelist)");
            sb.AppendLine("/whitelist {check} (Checks if you're currently on the whitelist)");
            sb.AppendLine("/whitelist {kick} (Kicks all players that are not whitelisted. This only work if whitelist is enabled)");
            sb.AppendLine("/whitelist {off} (Turns whitelist off)");
            sb.AppendLine("/whitelist {on} (Turns whitelist on)");
            sb.AppendLine("/whitelist {rem} [UID] (Removes the specified Steam UID to the whitelist)");
            sb.AppendLine("/whois *player name* (Displays connection, user, and leaderboard information of the specified user)");

            return sb;
        }
    }
}
